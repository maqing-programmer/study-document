1.常用的数据结构

  -数据结构

  计算机存储，组织数据的方式;

  -常用的数据结构主要有四大类

  -线性表

  （1）链式存储结构 (链表)
       
       代表：LinkedList  

   (2) 顺序存储结构 (数组）

       代表:ArrayList 

  -栈 （Stack）
   
   Java中 java.util.Stack<E> 可以用来表示栈

  -队列 (Queue)

   Java中 java.util.Queue<E> 可以用来表示队列

  -哈希表

  代表：HashMap ,LinkedHashMap

  -树

  -图

2.常见的算法

  (1)排序算法
    
      快速排序

      -核心思想

      通过一趟排序将要排序的数据分成两个部分，其中一部分所有的数据要比另外一个部分的所有

      数据都要小,然后再按照此方法对这两个部分分别进行快速排序，也就是递归进行，直到分出来

      的两个部分都只有一个数的时候结束，这个时候实际上整个数据就是有序的了;

      -排序步骤

       一趟排序算法：

       一个数组：a[] 长度为length

       -设置变量start,end  i,j,初始的时候 start=0,end=length-1,i=0,j=length-1；

       -以数组中第一个元素作为关键数据key,即a[0]=key;

       -从j开始由后向前搜索(j--)，找到第一个比key小的数据

        从i开始从前向后搜索(i++),找到第一个比key大的数据

        然后交换a[i]和a[j]的值

       -然后重复第三步，直到i==j 时结束第一趟排序；

       -然后分别使用快速排序排序对[start，i-1]和[j+1,end]两部分的 

        数据进行上述排序过程；

      -Java实现
      
    /**
     * 快速排序算法
     */
    private void quickSort(int[] array, int start, int end) {

        int key = array[start];
        int i = start;
        int j = end;

        while (i < j) {

            while ((i < j) && array[i] < key) {
                i++;
            }

            while ((i < j) && array[j] > key) {
                j--;
            }

            if (array[i] == array[j] && i < j) {
                i++; //这里写i++或者j--都是可以的
            } else {
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        if (i - 1 > start) {
            quickSort(array, start, i - 1);
        }

        if (j + 1 < end) {
            quickSort(array, j + 1, end);
        }

    }  

(2)递归算法

   在上面排序算法我们使用到了递归算法，我们就来学习一下递归算法; 

   -核心思想

    就是将一个问题重复分解为相同类型的子问题，重复调用自身方法的算法

(3)分治算法

   -核心思想    

    将一个规模为N的问题，分解成K个规模较小的子问题，这个子问题相互独立且与原问题性质相同，

    求出子问题的解，就可以得出原问题的解

   -使用分治算法的经典问题

     -二分查找

      二分查找是一种高效的查找方法，但是要求是顺序存储结构，并且数据是有序的; 

      在一个有序数组中查找一个数，返回下标

    /**
     * 二分查找
     *
     * @param array
     * @param target
     * @return
     */
    private int binarySearch(int array[], int target) {
        int left = 0, right = array.length - 1;
        int middle;
        while (left <= right) {
            middle = (left + right) / 2;
            if (array[middle] > target) {
                right = middle - 1;
            } else if (array[middle] < target) {
                left = middle + 1;
            } else {
                return middle;
            }
        }
        return -1;
    }


(4)二叉查找树

   二叉查找树是一棵空树,或者是具有以下性质的二叉树，若它的左子树不为空，则左子树上所有节点的值

   均小于根节点的值，若它的右子树不为空，则右子树上所有节点的值均大于根节点的值,然后左右子树均

   为二叉查找树；

      public class BinarySearchTree {

        private Node mRootNode;

        public class Node {

            private int mValue;
            private Node mLeft;
            private Node mRight;

            public Node(int value) {
                mValue = value;
            }

            public void addNode(Node node) {

                if (node.mValue < mValue) {
                    if (mLeft != null) {
                        mLeft.addNode(node);
                    } else {
                        mLeft = node;
                    }
                } else {

                    if (mRight != null) {
                        mRight.addNode(node);
                    } else {
                        mRight = node;
                    }

                }

            }

            public Node searchNode(int value) {

                if (mValue == value) {
                    return this;
                } else if (mValue > value) {
                    if (mLeft != null) {
                        return mLeft.searchNode(value);
                    } else {
                        return null;
                    }
                } else {
                    if (mRight != null) {
                        return mRight.searchNode(value);
                    } else {
                        return null;
                    }
                }
            }

            public void deleteNode(Node parentNode, int value) {
                if (value == mValue) {
                    if (value > parentNode.mValue) {
                        parentNode.mRight = null;
                    } else {
                        parentNode.mLeft = null;
                    }

                } else if (value > mValue) {
                    if (mRight != null) {
                        mRight.deleteNode(this, value);
                    }
                } else {
                    if (mLeft != null) {
                        mLeft.deleteNode(this, value);
                    }
                }

            }

            @Override
            public String toString() {
                return "Node{" +
                        "mValue=" + mValue +
                        ", mLeft=" + mLeft +
                        ", mRight=" + mRight +
                        '}';
            }
        }

        public void addNode(int value) {
            Node node = new Node(value);
            if (mRootNode == null) {
                mRootNode = node;
            } else {
                mRootNode.addNode(node);
            }
        }

        public Node searchNode(int value) {
            if (mRootNode != null) {
                return mRootNode.searchNode(value);
            } else {
                return null;
            }
        }

        public void deleteNode(int value) {
            if (mRootNode != null) {
                if (mRootNode.mValue == value) {
                    mRootNode = null;
                } else {
                    mRootNode.deleteNode(mRootNode, value);
                }
            }
        }

    } 

(5)贪心算法

   -核心思想

    在求解问题时，总是做出在当前看来最好的选择，而不从整体最优解上加以考虑；

    那么可以使用贪心算法的问题，需要保证问题的整体最优解可以通过一系列的局部

    最优解达到；

   -算法流程 

    每做一次贪心选择,就将所求问题简化为一个规模更小的子问题。对于一个具体问题，

    要确定它是否具有贪心选择的性质，我们必须证明每一步所作的贪心选择最终能得到

    问题的最优解

(6)动态规划算法

   -核心思想

    在求解问题时，将问题分成小问题，然后根据这些小问题的解，可以得到原问题的解

    很明显与分治算法的思想是一样的，只不过分治算法分解出来的小问题是相互独立的，

    而动态规划算法适用于分解出来的问题不是相互独立的，是重叠的,如果这类问题还使用分治算法

    的思想，那么有些子问题实际上就被重复计算了很多次，所以在得到子问题的解时，把他记录下来，

    在求解其它子问题时，利用已经计算的子问题的结果求解，这就是动态规划与分治算法的核心不同点

    -动态规划算法求解问题的基本步骤

       首先我们要判断一个问题是否需要用动态规划来求解，一般情况下，凡是

       需要求最值，也就是最优解问题，我们都要考虑使用动态规划来求解;

     (1) 确定问题状态

         提取最后一步

         子问题转化

     (2) 问题方程化
     
     (3) 根据实际情况确定问题边界和初始化

     (4) 确定计算顺序并求解

   -经典问题
   
    -斐波那契数列 

     数列：F(n)

     当n=0或者n=1时，F(n)=1;

     当n>1时 F(n)=F(n-1)+F(n-2);

     编程求解F(n)的值

     那么根据斐波那契数列定义其实我们是很容易写出一种求解法

      private int fibonacci(int n) {
        if (n == 0) {
            return 1;
        } else if (n == 1) {
            return 1;
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }  

    这个解法实际就是分治算法的思想利用递归求解问题，将大问题F(n)分解成小问题F(n-1)以及

    F(n-1),然后利用递归小问题又可以分解成小问题，直至小问题可以求解为止；

    但是上面这种解法，有些小问题实际上被重复计算了多次

    F(n-2)到F(0)实际上都被重复计算了多次,效率很低；

    这里之所以子问题会被重复计算多次，就是因为小问题之间不是相互独立的，因为

    F(n)=F(n-1)+F(n-2)，所以我们可以把已经求解过的小问题的解保存下来，然后

    再计算小问题时，如果用到了已解小问题，直接取结果接口可以了；

    所以利用动态规划算法求解的代码如下：

    private int fibonaci_dp(int n) {

        int[] a = new int[n + 1]; //用于保存已经求解的问题的结果

        if (n == 0) {
            a[n] = 1;
            return a[n];
        } else if (n == 1) {
            a[n] = 1;
            return a[1];
        } else {
            a[0] = 1;
            a[1] = 1;
            for (int i = 2; i <= n; i++) {
                a[i] = a[i - 1] + a[i - 2];
            }
            return a[n];
        }

    }

    动态规划其它经典问题：

    -楼梯有10级台阶，规定每一步只能跨一级或两级，要登上第10级台阶有几种不同的走法?

    -01背包问题

   










































