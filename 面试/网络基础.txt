1.网络通信的七层协议

  应用层

  表示层

  会话层

  传输层

  网络层

  数据链路层

  物理层

2.Http与Https

  -Http协议 

  超文本传输协议;我们的网络通信一般都是基于Http协议的;

  Http是不安全的，没有进行数据加密,没有进行数据完整性验证,

  没有验证数据通信双方的合法性;

  所以Http是不安全的;

  而Android P开始 Android禁止明文流量的网络请求,所以Http请求是不允许的;

  包括WebView加载Http链接也是不被允许的，只能使用Https请求;

  包括使用第三方图片加载框架加载http链接的图片也是无法加载的；

  -Https协议 

   Https协议是安全的Http协议; Https=Http+SSL/TLS

   Https协议对通信数据进行了加密,对通信的数据进行了完整性验证，

   保证通信双方的合法性；
   
   Https请求的过程:

   -客户端向服务器端发起请求

   -服务器端有一对公钥和私钥，接收到服务器端的请求之后，首先将公钥发送给客户端
    
    实际上是数字证书发送给客户端

   -客户端接收到公钥后，需要验证公钥是否合法，实际上是验证数字证书是否合法

    如果合法，客户端会生成对称加密的秘钥；然后使用接收到放入服务器的公钥对

    生成的对称加密秘钥进行加密，发送给服务器端；

   -服务器接收到客户端加密之后的堆成加密秘钥，使用私钥解密，然后使用解密出来的秘钥
   
   对响应数据进行加密，然后发送给客户端

   -客户端接收到服务器加密之后的响应数据，使用之前接收到的公钥进行解密;

     这样一次Https请求流程完成;

  -数字证书
  
   上面的一次Https请求流程中,客户端会接收服务器端的公钥，如果客户端发起请求后，服务器返回

   公钥时，被黑客拦截了，修改了公钥,将公钥改成了黑客自己的公钥,所以客户端怎么确定接收到的

   公钥是合法的，这就需要使用一个中间担保人的角色，也就是数字证书认证中心(Certificate Authority)的存在；

   也就是专门给公钥做担保的机构，全球知名的认证机构有100多个，这些知名的认证机构是全球都认可的;

   那么CA如何对公钥进行担保呢，CA本身也有一对公钥和私钥，在服务器端使用私钥对要发送的公钥进行加密，
   
   然后将加密之后的公钥以及证书的过期时间，颁发给，以及颁发者这些信息组成数字证书，将数字证书发送给客户端，

   不论什么平台，都会内置一些全球公认的CA，这些内置的数字认证机构里实际就是存储了CA的公钥，客户端

   接收到数字证书后，使用内置的CA的公钥对数字证书中的公钥进行解密，如果解密不成功，说明接收到的数字证书不是由

   知名的CA颁发的,客户端是无法信任这样的服务器证书的; 如果内置的一个CA中的公钥可以解密数字证书中的公钥，就说明

   该数字证书就是由该CA签发的,是值得信任的；

   除了能够解密出公钥，客户端还要检查当前访问的域名是否与证书中的颁发给一致，还要检查数字证书是否过期等;

3. Session和Cookie

   Http请求时一种无状态的请求,即每次服务端接收到客户端的请求都是全新的一次请求，服务端并不知道客户端的历史请求记录

   Session和Cookie是用来弥补Http的这种无状态的缺陷的;






   		     













