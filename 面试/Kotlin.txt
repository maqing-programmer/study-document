1.Kotlin

  在2019 Google I/O上，Google宣布Kotlin成为Android的第一开发语言

2.Kotlin中变量的声明与赋值
  
  -声明变量

  示例：

  var count:Int=0

  val num:Int=1

  Kotlin中使用var或者val关键字来声明变量,var声明的变量可以改变值，

  而val声明的变量，无法重新赋值，也即不能修改

  变量名:类型

  Kotlin中不需要以";"结束

 -Kotlin中空安全设计
 
  我们知道在Java中的属性是有默认的初始值的，对于对象类型，如果不显示的赋值，其

  默认的初始值是null;

  而Kotlin中变量是没有默认的初始值的，并且由于Kotlin的空安全设计，所有的变量默认

  情况下都不能为空，如果显示的赋值null，也是会报错的；

  var name:String=null //这样写编译器是会报错的

  var name:String?=null //在类型后加"?"表示这个变量是个可空类型，那就没有问题

  在类型后面加一个"?"表示变量是一个可空类型，但是还是由于Kotlin的空安全设计，在

  使用这个变量的使用，如果直接使用也是会报错的；

  var view:View?=null

  view.setBackgroundColor(Color.RED) //编译器会报错

  view?.setBackgroundColor(Color.RED) //这种写法就没问题

  使用"?."来调用对象的方法，会做一次非空确认之后再调用方法;

  还可以使用"!!":

  view!!.setBackgroundColor(Color.RED) 
  
  使用"!!"就是告诉编译器我保证view一定是非空的，编译器不要检查了，实际上这样做就是

  抛弃了Kotlin的空安全设计，运行的过程中如果为空，是会报NullPointerException的

-延迟初始化 lateinit

 由于Kotlin中的空安全设计，声明一个变量时，默认情况下都必须要赋予初始值 （除非是抽象的

 属性，这里暂不介绍抽象属性）且不能为空；

 那么在实际情况下，我们定义一个属性，例如View的时候，我们希望它是非空的，但是在声明的时

 候我们又无法赋值非空的初始值，如果使用"?"来表示可空，后面使用的时候又需要通过"?."来使

 用，影响使用和代码可读性；

 这种情况下，我们可以使用lateinit关键字在声明变量时延迟初始化，这样编译器就不会对这个变

 量检查初始化和报错

 class KotlinActivtiy : AppCompatActivity() {

    lateinit var button: Button //延迟初始化

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activtiy_kotlin)
        button = findViewById(R.id.btn_activity_kotlin)
    }

}

-类型推断

 在声明变量的时候，如果进行了赋值，那么不写变量类型也是可以的；

 var name="张三" //声明变量时，有初始值，不写类型没有问题

 name=1  //会报错

 根据你声明的时候的初始值，Kotlin会推断出变量类型为String,后面

 你赋值1就会报错，因为1不是String类型的，这个就叫做类型推断

3.Kotlin中的数据类型

  -数值类型

   Byte,Int,Short,Long,Float,Double

   示例：

   var price:Double=0.0

 -数组类型
  
  IntArray,FloatArray,DoubleArray,CharArray等 

  var ages:IntArray= intArrayOf(20,15,16)


4.函数 function

  -Java中的方法(method)，Kotlin中叫做函数(function) 

  -函数的声明

   fun getData(type:String):String{
       ...
   }

   Kotlin中函数的声明是以fun关键字开头，如果有返回值，返回值类型在函数和参数

   后面，没有返回值，可以写Unit,也可以不写；

   fun setData(data:String):Unit{

     ...
   }

   或者

   fun setData(data:String){

     ...

   }

   -函数中形参的空安全
    
    由于Kotlin中的空安全设计，我们在调用函数传递形参时，也需要注意；

    默认情况函数的形参也是不能为空的,如果我们把一个可空的变量传给了

    函数的不可为空形参，是会报错的；

    fun setData(data:String){

     ...

    }

    var data:String?="张三"

    setData(data) //可空变量传给不可空形参，是会报错的

    var data:String="张三";

    setData(data) //不可空变量传给不可空形参就不会有问题

    //定义形参可空的函数

    fun setData2(data:String?){

     ...

    }

    var data：String？="张三"

    setData(data) //可空变量传给可空形参没有问题

-属性的getter和setter函数

 在Java中，类的属性我们经常会定义gettter/setter函数。来获取和设置属性的值

 而Kotlin中则有专门的get和set关键字来表示getter/setter函数

 getter/setter函数有专门的的关键字get和set

 getter/setter函数位于var所声明变量下面

  class People {
        var name: String = ""
            get() {
                return field
            }
            set(value) {
                field = value
            }
        var age: Int = 0
            get() {
                return field
            }
            set(value) {
                field = value
            }
    }    

5.类和对象

 class KotlinActivity : AppCompatActivity() {

 }

 -Kotlin中定义一个类也是使用class关键字

 -Java中一般会用public来定义类的可见性，而Kotlin中默认的可见性就是public

  变量，方法，类，接口默认的可见性都是public的，所以定义类的时候省略了

 -Kotlin中使用":"表示继承,":"也可以表示实现

  Kotlin中接口的定义和Java中一样

  interface MyInterface{

   ...

  }

 class KotlinActivity : AppCompatActivity(), MyInterface{

 }

 -构造方法

 Kotlin中构造方法使用constructor关键字来声明

 class KotlinActivity : AppCompatActivity() {

 }

 这个AppCompatActivity()也是一种省略写法等价于

 class KotlinActivity constructor(): AppCompatActivity {

 }

 或者

class KotlinActivity : AppCompatActivity {
   constructor(){
	
    }
 }
}

-方法的重写 override 关键字 

 class KotlinActivity : AppCompatActivity() {
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activtiy_kotlin)
    }

 }

 Java中方法重写用的是@override注解标识的，Kotlin中使用的是override

 关键字来表示方法的重写

 Kotlin 里的 override 函数的可见性是继承自父类的

 -Kotlin中的类默认是final的，也就是不能被继承的继承

  我们知道Java中的类只有显示的加fianl才表示最终类不能被继承，而
 
  Kotlin中的类,方法默认是final的,是不能被继承或者重写的，

  如果希望类可以被继承，方法可以被重写，需要加上open关键字

  open class KotlinActivity : AppCompatActivity() {

  } 
  
  这样KotlinActivity就是可以被继承的

  class NewActivity : KotlinActivity{

  }

  但是要注意open是不会被继承的，所以NewActivity默认还是final的，

-abstract 修饰的类是抽象类,不能直接实例化  

-实例化一个类

 class A{

 }
 
 var a:A=A()

 Kotlin中的类的实例化，没有new关键字，直接调用构造方法即可

 总结：

 类的定义

 类的构造方法

 类的可见性

 类的继承

 override函数

 类的实例化

6.类型的判断和强转

  Java中使用instanof 做类型判断，使用((B) A).test()类型强转

  而Kotlin中使用 is 来做类型判断 ，as 关键字来做类型强转

  open class A{

   
  }

  class B: A(){
    var fun test(){

    }
  } 

  var a:A=B()

  if(a is B){
     (a as B).test()
  }

  由于Kotlin中有类型判断，所以可以省略强转写法

  直接：
  
     if(a is B){
       a.test()
     }

 (a as B) 类型强转，如果强转成功，则没有问题，如果强转不成功，肯定是会抛出异常crash的
 
 Kotlin中也设计了安全的强转 使用 "as?" ,如果强转失败不会泡池异常crash,而是强转成空null

 (a as? C)?.test()  //因为as?表示可能会强转成null,所以调用要使用"?."来安全调用      

 下面给出几个示例：

 (a as? C)?.test()    //将a强转成一个不可为空的C对象，如果a不是C类对象或者C类的子类对象，但是不为null，

                      //则被强转成null,然后方法不会被调用;如果a为null则会crash   

 (a as  C?)?.test()   //将a强转成一个可为空的C对象,如果a不是C类对象或者C类的子类对象，但是不为null,则会crash;

                      //如果a为null,则会被强转成null,不会调用方法

 (a as? C?)?.test()   //将a强转成一个可为空的C对象，如果a不是C类对象或者C类的子类对象,或者为null

                      //则被强转成null,然后方法不会被调用
 
7.Kotlin中那些[不Java]的写法
  
  Kotlin完全兼容Java,也就是Java编写的代码，和Kotin编写的代码是可以完美交互的

  而不是说可以用Java的写法去写Kotlin；现在我们就来学习一下Kotlin中那些[不Java]

  的写法

  -构造方法 constructor
   
   //Java
   public class A{

     private String mId;

     private String mName;

     public A(String id,String name){
        this.mId=id;
        this.mName=name;
     }
   }

   //Kotlin
   open class A{

        var id:String=""

        var name:String=""

        constructor(id:String,name:String){
            this.id=id
            this.name=name
        }

    }
   
  Kotlin中使用constructor来声明构造函数
  
  默认的可见性就是公开的

  -初始化代码块 init

   //Java中的初始化代码块

   public class A{

     {

       //初始化代码块，先于构造方法执行

     }

     public A(){

     }

   }  

   //Kotlin中的初始化代码块

   class A{
     
     init {
      
      //初始化代码块，先于构造方法执行

     }

     constructor(){

     }

   }

 Kotlin中初始化代码块需要用init关键字标识

 -静态属性和静态方法

  Java中使用static 修饰类级别的属性和方法，也即静态变量和静态方法

  可以通过"类名."直接引用;

  而Kotlin中实际上是没有静态属性和静态方法的概念的，取而代之的是compain object伴生对象

  和object对象

  class A{

     companion object B{

       var name:String=""

       fun printName(){

       }
     }

  }

  A.B.name 或者A.name

   class A{

     companion object {

       var name:String=""

       fun printName(){

       }
     }

  }

  可以直接把对象名B给省略掉

  A.name

  在一个类中使用companion object定义一个伴生对象，伴生对象中定义的变量可以看作是静态变量，

  伴生对象中定义的方法可以看做是静态方法；

  注意：一个类中只能定义一个伴生对象

-object关键字

 (1)可以使用object关键字来修饰类,表示定义一个类，并声明一个类的对象

 该类中的变量，方法都可以通过类名直接访问；

 object定义的类中不能重写构造方法，声明出来的对象只有一个，所以

 也是单例的一种形式

 object A{

   var name:String=""

   fun test(){

   }

 }

 A.name

 A.test()

 当然object定义的类也是可以继承和实现其他的类和接口的

 object A :B(),MyInterface{

 }

 (2)object是定义一个类，并声明一个对象

    注意这个类是单例的

    object A{

     var name:String=""

    }

   这样是定义了一个单例类，是饿汉式的单例类，在使用的时候

   创建实例的，并且是线程安全的单例

 (2)object标识匿名类

    Java中匿名内部类写法

     ViewPager.OnPageChangeListener listener = new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
                
            }

            @Override
            public void onPageSelected(int position) {

            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        };   

  Kotlin中匿名内的写法:

   var listener = object: ViewPager.OnPageChangeListener {

            override fun onPageSelected(position: Int) {
                TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
            }

            override fun onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int) {
                TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
            }

            override fun onPageScrollStateChanged(state: Int) {
                TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
            }

        }

 Java中使用new来创建匿名内部类的对象，Kotlin中使用 "object:" 来创建匿名内部内的对象  

-顶级属性/方法 top-level property/function

 所谓顶级属性和方法，就是把属性和方法的声明写在class外面，这个是Kotlin所允许的，

 这样声明的属性和方法不属于类，而是属于包

 顶级属性和顶级方法和静态属性以及静态方法一样是全局的，但是使用起来更加方便，就连类名都不用写

 package com.nado.androiddemo.kotlin

 var name:String="张三"

 fun test() {
    
 }

 class A {

 }

 我在包下创建了一个Kotlin文件,里面定义了一个类

 类外定义了一个属性和方法,这个属性和方法就是顶级属性和方法;

 同一个包下使用顶级属性和方法，直接使用就可以，

 不同包下,导入包，就可以使用

 总结： 
 
 在实际开发中，object 、companion object 、top-level到底该选择使用哪一个

 如果是写工具类的功能，直接创建文件，写top-level函数

 如果是需要继承自别的类或实现接口，就用object和companion object

-const val 定义常量

 前面我们已经学习过val来声明一个常量，而const val也是声明常量的，只不过

 const val只能用在object(包括伴生对象companion object)和顶级中

 只能是基本类型和String类型可以使用const val修饰，其他自定义类对象无法使用const val修饰

 那const val和val的区别是什么？

 用途是没什么区别的，都是定义常量，查看字节码可以看到

 val声明的变量是 private final static 的，并且会生成一个getNormalObeject()方法，通过方法调用访问

 const val声明的变量是public final static,可以直接访问

 所有当定义常量时，处于效率考虑，我们应该使用const val ,避免频繁函数调用

-数组和集合

 Kotlin和Java一样有三种集合类型 List、Set、Map

 List 以固定顺序存储一组元素，元素可以重复。 

 Set 存储一组互不相等的元素，通常没有固定顺序。

 Map 存储 键-值 对的数据集合，键互不相等，但不同的键可以对应相同的值。 

 var list:List<Int> = listOf(1,2,3)

 var set:Set<Int> = setOf(1,2,3)

 var Map:Map<String,String> =mapOf("key1" to "value1", "key2" to "value2")

 Kotlin中的集合分可变集合和不可变集合 

 上面这几个 listOf、setOf、mapOf创建的都是不可变的集合
 
 不可变集合：指的是集合中的元素，和集合的大小都不可变

 可变集合：  集合中的元素以及集合的大小是可变的

 可变集合创建需要使用:mutableOf()

 var changeList:MutableList<String> = mutableListOf() //可变List

 var changeSet:MutableSet<String> = mutableSetOf() //可变Set

 var changeMap:MutableMap<String,String> = mutableMapOf() //可变Map

 不可变集合是可以转可变集合的

 list.toMutableList()

 set.toMutableSet()

 map.toMutableMap()

 -可见性修饰符

  public  公开，哪里都可以引用,Kotlin中默认都是public的

  private 私有，可见性最小，根据声明位置不同，分为类中可见和文件中可见

  protected 受保护的，只能子类可见

  internal  module内可见

8.Kotlin中更方便的用法

  上面我们主要学习了一下Kotlin中[不Java]的用法，下面我们主要学习一下Kotlin中

  更方便的用法

  -主构造器

   之前我们已经学习了Kotlin中类的构造方法,使用constructor关键字,还有一种写法是

   可以在类名之后,也是要使用constructor,这个构造方法是主构造方法；

   //普通构造方法写法

   class A{

     var name:String=""

     constructor(name:String){

          this.name=name

     }

   }

   //方便的写法

  class A constructor (name:String){
        var name:String=name  //等于号后面的这个name就是主构造方法中的参数
    } 

 一个类中最多有一个主构造方法，如果一个类声明了主构造方法，

 那么其他次构造方法必须要通过this关键字主动调用主构造方法;

 在类的出初始化过程中首先执行的就是主构造方法

 class C constructor(name:String){

       constructor(name:String,id:String) : this(name){ //直接调用主构造方法
           
       }

       constructor(name:String,id:String,age:Int) : this(name,id){ 

       //调用上一个次构造方法，简洁调用主构造方法 

       }

   }

通常情况下,主构造方法中的constructor关键字可以省略

class A(name:String){
	
}

但是有些情况下，主构造方法的constructor关键字是不能省略的

如在主构造方法中使用了可见性修饰符

class A private constructor(name:String){
	
}

主构造器里面还可以直接声明属性,主构造方法里声明属性需要加上 var或者val

class A constructor(var name:String){

	 fun test(){
         name="张三"
     }

}

等价于 

class A constructor(name:String){
	
	var name:String=name //这里等号右边的name就是主构造方法中的参数

}

-函数简化

 -使用"="连接返回值

  //普通写法
  fun getArea(with:Int,height:Int):Int{

    return width*height

  }

  //简化写法 
  fun getArea(with:Int,height:Int):Int=width*height

  我们知道Kotlin中有类型推断，所以这里的返回值类型也是可以省略的

  fun getArea(with:Int,height:Int)=width*height

  对于没有返回值的情况，也就是返回值为Unit的情况，也可以简化

  fun print(){
    Log.e(TAG,"test")
  }

  fun print()=Log.e(TAG,"test")

-参数的默认值

 Java中有方法的重载，也就是一个类中有多个方法名相同，但是参数类型或者参数个数不同的方

 法

 称之为方法的重载;

 Kotlin中也有方法的重载，和Java中是一样的;

 但是Kotlin中还有一种更加简单的方式，就是参数的默认值

 fun print(name:String="world")=Log.e(TAG,name)  

 这个方法的形参有一个默认值"world",当调用该方法，不传入参数时，

 参数就是默认值"world"

 print()

 等价于 print("world")

 含有参数的默认值的方法在调用时，也是有一定规则的

 fun print(name:String="world",age:Int){

 } 

 print(10) //这个方法，有默认值的参数，在无默认值的参数的前面，这样调用是会报错的
           
           //报参数不匹配操作The integer literal does not conform to the expected type String，No value passed for parameter 'age'
 
 Kotlin中使用命名参数来解决这个问题

 即正确的调用应该为:

 print(age=10)

 与命名参数对应的是位置参数，也就是按位置顺序进行参数填写

 如果调用一个函数，混用位置参数和命名参数，那么所有的位置

 参数都应该放在第一个命名参数之前

 fun print(name:String="world",age:Int){

 } 

 print(name="张三",10) //这样调用就会报错，因为混用了命名参数和位置参数

                      //但是位置参数应该在命名参数之后

 print("张三",age=10) //这样调用就是正确的

 -本地函数(嵌套函数)

  //普通函数

  fun login(name:String,pwd:String){

      if(name.isEmpty()){
         throw IllegalArgumentException("用户名不能为空")
      }

      if(pwd.isEmpty()){
         throw IllegalArgumentException("密码不能为空")
      }

  }                    


  fun login(name:String,pwd:String){

      fun validate(value:String,String promptStr){ //本地函数(嵌套函数)
           
           if(value.isEmpty()){
               throw IllegalArgumentException(promptStr)
           }

      }

      validate(name,"用户名不能为空")

      validate(pwd,"密码不能为空")

  }
  
这里的validate方法就是本地方法(嵌套方法),只能是在其外部方法login中调用，其它

地方是无法访问这个本地方法(嵌套方法)的;

嵌套方法是可以访问其外部方法中的所有变量的  

-字符串中的的方便写法

 Java中字符串与变量之间是使用 "+"进行拼接的,Kotlin中也是如此

 val name="张三"

 Log.e(TAG,"Hi "+name)

 但是当变量比较多的时候，再使用 "+",可读性就会变差，写起来也麻烦

 Java给出的解决方案是String.format

 System.out.print(String.format("Hi %s", name));

 而Kotlin为我们提供了一种更加方便的写法

 val name="world"
 
 Log.e(TAG,"Hi $name")

 "$"后面除了可以跟变量，还可以跟表达式,但是表达式是一个整体，要用{}包起来

 Log.e(TAG,"Hi ${name.length}")

-数组和集合的方便用法

 (1)forEach遍历数组和集合的每一个元素

 val intArray=intArrayOf(1,2,3)

 val list=listOf(1,2,3)

 intArray.forEach { i->Log.e(TAG,"".plus(i)) }

 list.forEach { i -> Log.e(TAG, "".plus(i)) }
 

(2)filter 

   对数组和集合中每个元素进行过滤操作，如果过滤条件成立则留下，否则剔除

   最终生成新的集合

   var array:IntArray = intArrayOf(1,2,3)

   var list:List<Int> =array.filter{

     i!=1   //过滤掉数组中等于1的元素，最终变成了一个list

   }

(3)map 遍历数组和集合中每个元素并执行给定的表达式，最终形成新的集合 

   var list:List<Int> = array.map {

            i->i+1 //对数组中每个元素加1，生成新的list

        } 

(4)flatMap

   遍历数组和集合中每个元素，并为每个元素创建新的集合

    array.flatMap {i->
            listOf("${i+1}","a")
        } 

 -Range 

  Kotlin中Range表示区间的意思，也就是范围

  var range:IntRange=0..100

  0..100表示0到100的范围 [0,100]的闭区间

  除了IntRange，还有CharRange和LongRange

  也有半开区间 until

  var range:IntRange=0 until 100

  [0,100) 0到100 ，不包括100

  Range这个东西天生就是用来遍历的

  var range:IntRange=0..100

  for(i in range){

    Log.e(TAG,"$i")

  }

  除了使用默认的步长1，还可以通过step设置步长

     for (i in range step 2){
         Log.e(TAG,"$i") //0,2,4,6.....100
       }











  




































 



















































 

























