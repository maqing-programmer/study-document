1.Glide简介

  Glide是一个快速高效的Android图片加载库，可以加载图片以及GIF动画

2.Glide基本使用

  Glide.with(mActivity)
       .load(mImagUrl)
       .into(mImageView);

   Glide.with(mFragment)
       .load(mImagUrl)
       .into(mImageView);  

3.Glide加载图片的流程

  -我们通过上面最简单的基本使用，来跟踪一下Glide加载图片的流程

    Glide.with(mActivity/mFragment/Application)-->

    Glide.get(context).getRequestManagerRetriever().get(context)-->

    (

     解析： 

     Glide.with()调用的是Glide.get(context).getRequestManagerRetriever().get(context)

     这一步的作用主要是Glide生命周期的控制，如果with中传入的是Activity或者Fragment,Glide

     会创建一个无UI的Fragment添加到Activity或者Fragment中,然后通过这个Fragment的生命周期，来管理

     Glide加载图片请求的开始，停止，重新开始；也就是通过这个Fragment与我们的Activity以及Fragment

     生命周期进行绑定;

     如果with中传入的是Application，那么并不会创建Fragment，这个时候Glide加载图片的请求的生命周期

     和整个应用的生命周期一样，除非应用被杀死，或者Glide加载图片的请求完成，否则Glide加载图片的

     操作一直存在;

     )

     -->RequestManager.load(mImageUrl)

     -->RequestBuilder.load(mImageUrl)


     (

      解析：

      load()操作，其实过程很简单，并没有进行图片加载的真正操作，只是对加载的数据源进行封装，也就是

       确定我们加载的数据源到底是什么样的形式 Drawable,Bitmap,Url/Uri.FilePath,File,resourceId

     )

     -->RequestBuilder.into(mImageView)

     -->GlideContext.buildImageViewTarget(view, transcodeClass)
     
        (

        解析：

        这里会创建一个ImageViewTarget,那么为什么会创建一个ImagevIewTaget,查看源码，我们会发现

        这个ImageViewTarget是和我们的ImageView绑定的，具体为什么要这样做，我们继续往下看源码
        
        )

     -->RequestBuilder.into(

      @NonNull Y target,
     
      @Nullable RequestListener<TranscodeType> targetListener,
     
      BaseRequestOptions<?> options,
     
      Executor callbackExecutor)

      (

       解析：
       
       通过查看这个方法的源码，我们可以知道上面ImageViewTarget的作用，ImageViewTarget主要是将

       Glide加载图片的请求(Request)与ImageView绑定起来,如果这个ImageView已经有过图片加载请求了，那么

       会判断这次的加载的图片请求，和上一次的加载图片的请求是不是同一个请求,这里判断是否是同一个请求

       不仅仅和数据源有关，还与设置的RequesOption中的配置有关;

       如果是同一个请求不再发起请求

       如果不是同一个请求，则先清除之前的请求，重新将新的请求与ImageViewTarget绑定，然后发起请求

      )

     -->RequestManager.track(target,request)

     -->RequestTracker.runRequest(request)

     -->SingleRequest.begin()

     -->SingleReady.onSizeReady(overrideWidth, overrideHeight)/Target.getSize(this);

     -->Engine.load()

     -->Engine.loadFromMemory() / Engine.waitForExistingOrStartNewJob()

        (

        解析：

        SingleRequest.begin()方法发起一个加载图片的请求， 

        首先会判断有没有执行加载的图片的宽和高(overideWidth,overrideHeight),

        如果没有则需要计算ImageView的宽和高 ,最终还是会回调SingleReady.onSizeReady(width,height)方法
        
        当加载的图片宽和高准备好之后，就开始获取图片资源了,

        Engine.loadFromMemory()会先从内存中读取缓存，当然是在没有设置跳过缓存的情况下， 

        如果内存缓存中有则直接读取内存缓存中的图片数据，如果没有则进行加载；

        Glide的内存缓存：

        这里从内存中读取缓存，Glide中的内存缓存有2种

        1.活动资源(Active Resources) 正在使用的图片字资源，也就是该图正在某个ImageView上显示

        2.内存缓存(Memory cache)  这个内存缓存是没有在ImageView显示，但是之前加载过并且仍然存在于内存找那个的图片资源

        活动资源这个内存缓存是存在于ActiveResources中的activeEngineResources这个数据结构中的,

        而activeEngieResource是一个Map，值是ResourceWeakReference，是图片资源的弱引用WeakReference<EngineResource<?>>

        而内存缓存Memory是保存在MemoryCache这个数据结构中，而这里的MemoryCache实际上是LruResourceCache,而LruResourceCache

        是继承自LruCache,所以这个Memory实际上使用的是LruCache算法,但是Glide这里的LruCache并不是Android自带的LruCache,而是

        Glide自己写的一个LruCache,但是原理都是一样的，都是设置一个内存缓存的最大值，当内存缓存达到这个最大值的时候，会将使

        用次数最少的缓存对象移除掉

        )

     -->Engine.waitForExistingOrStartNewJob()  "xywrrmp"
"xywrrmu#p"


     -->Engine.start(decodeJob)

     -->DecodeJob.run()

     -->DecodeJob.runWrapped()

     -->DecodeJob.getNextStage()

     -->DecodeJob.runGenerators()

     -->DataFetcherGenerator.startNext()

     (

      解析:

      上一次的解析我们讲到了从内存缓存中读取图片数据,那么从waitForExistingOrStartNewJob这个

      方法开始，进入到从磁盘缓存读取以及从从数据源获取图片数据;

      waitForExistingOrStartNewJob方法中创建了两个变量EngineJob,DecodeJob,

      EngineJob是用来管理(添加/移除)加载的回调的

      DecodeJob是用来从缓存数据或者原始数据源解码和转换图片资源

      getNextStage()方法用来获取磁盘缓存策略,根据不同的磁盘缓存策略，使用不同的处理策略,

      不同的处理策略读取不同的磁盘缓存数据 

      ResourceCacheGenerator  读取转换之后的缩略图磁盘缓存数据

      DataCacheGenerator      读取原数据磁盘缓存数据

      SourceGenerator         这个是从数据源进行加载

     )  

     -->DataFetcher.loadData() 

     (
       解析：
       
       最后无论是使用磁盘缓存中的数据，还是从数据源读取数据，都会使用相应的DataFetcher

       来读取数据;

       如果是加载网络图片，没有缓存的情况下会使用HttpUrlFetcher来下载网络图片

       HttpUrlFetcher内部使用的是HttpUrlConnection发起网络请求下载图片的;
      
     )
        
   -总结：

    (1)Glide加载图片生命周期的控制

       Glide生命周期的控制主要是通过在Activity和Fragment中添加一个无界面的Fragment,以及来监听

       Activity和Fragment的生命周期，在Activity和Fragment销毁之前将加载图片的请求移除掉；

       如果传入的是Context对象是Application,Glide加载图片的请求就是一个全局请求，在应用没有被

       杀死，加载操作没有完成之前，Glide加载的请求一直存在;


   (2)Glide的图片加载流程
      
      Glide首先会创建一个ImageViewTarget,创建这个Target的目的是与加载图片的请求进行绑定，

      以便保证一个ImageView只会有一个请求，然后获取图片显示在ImageView的上的宽和高,如果

      没有指定图片的宽和高，则会对ImageView的宽和高进行计算，然后会判断图片是否在内存中

      有缓存，这里的内存缓存，一个是是否有ImageView正在显示这个图片,是一个弱引用的Map,

      也就是活动资源缓存;

      一个是MemoryCache,采用LRU算法；如果图片没有内存缓存，则会判断是否有磁盘缓存，如果

      有的话会直接去读磁盘缓存，如果没有磁盘缓存，是网络图片的话，会从网络中下载图片，然后

      读取，读取后不是立即加载到ImageView上，而是把读取的图片加载到活动资源内存缓存中，

      然后再显示到Target绑定的ImageView上;

   (3)Glide的磁盘缓存

     磁盘缓存策略(DiskCacheStrategy)
     
     Glide可以将磁盘缓存策略应用到每一个单独的请求,以设置是否缓存，缓存无修改的原始数据，或者仅缓存

     转换之后的缩略图，或者都缓存;

  (4)缓存的管理
  
     Glide内存和磁盘缓存都是LRU，也就是在缓存达到限制值的时候，会自动移除最长时间没有使用的缓存数据

     当然Glide也提供了接口去手动清理内存和磁盘缓存;











