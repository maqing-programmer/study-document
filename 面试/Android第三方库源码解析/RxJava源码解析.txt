1.RxJava

  RxJava是一个基于观察者模式的的异步处理框架;

  Android中AsyncTask和Handler都可以用来处理异步任务;

  而RxJava之所以受欢迎，是得益于RxJava的基于事件流的链式调用

  方式，使得我们异步逻辑处理变得简洁，并且有大量的操作符等API

  可以实现各种场景和需求；

2.RxJava的基本使用

  (1)创建被观察者:
  
  Observable<String> observable = Observable.create(new ObservableOnSubscribe<String>() {
            @Override
            public void subscribe(ObservableEmitter<String> e) throws Exception {

                Log.e(TAG, "subscribe: "+Thread.currentThread());

				//发射事件
                e.onNext("1");  
                e.onNext("2");
                e.onNext("3");
                e.onNext("4");

            }
        });  

 (2)创建观察者

 //创建观察者
        Observer<String> observer = new Observer<String>() {
            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, "onSubscribe: ");
            }

            @Override
            public void onNext(String value) {

                //接收到事件
                Log.e(TAG, "onNext: "+value+","+Thread.currentThread());

            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, "onError: ");
            }

            @Override
            public void onComplete() {
                Log.e(TAG, "onComplete: ");
            }
        }; 

(3)连接观察者和被观察者

 observable.subscribe(observer);

当然我们说了RxJava是为了处理异步操作，如果仅仅是这样，就不是异步操作，而是同步操作

因为这样观察者和被观察者都是在当前线程，也就是同一线程，所以是同步操作，那么异步操作

肯定是观察者和被观察者处于不同线程

observable
        .subscribeOn(Schedulers.newThread())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(observer);  

这样被观察者observerable就工作在一个新的线程中，而观察者observer工作在主线程中

所以就会是异步操作了;

-RxJava的链式调用

 上面我们说过RxJava是基于事件流的链式调用，那么上面基本使用的三步，我们应该可以通过

 链式调用连起来；

 Observable.create(new ObservableOnSubscribe<String>() {
            @Override
            public void subscribe(ObservableEmitter<String> e) throws Exception {
                Log.e(TAG, "subscribe: " + Thread.currentThread());
                e.onNext("1");
                e.onNext("2");
                e.onNext("3");
                e.onNext("4");
            }
        }).observeOn(Schedulers.newThread())
          .subscribeOn(AndroidSchedulers.mainThread())
          .subscribe(new Observer<String>() {
                            @Override
                            public void onSubscribe(Disposable d) {

                            }

                            @Override
                            public void onNext(String value) {
                                Log.e(TAG, "onNext: " + value + "," + Thread.currentThread());
                            }

                            @Override
                            public void onError(Throwable e) {

                            }

                            @Override
                            public void onComplete() {

                            }
                        });

-切断观察者和被观察者之间的连接

 可使用Disposable.dispose()方法切断观察者和被观察者之间的连接

 调用该方法之后，观察者无法接受被观察者的事件，但被观察者还是可以发送事件的
    
   //使用 
   private Disposable mDisposable = null;

   Observable.create(new ObservableOnSubscribe<String>() {
            @Override
            public void subscribe(ObservableEmitter<String> e) throws Exception {
                Log.e(TAG, "subscribe: " + Thread.currentThread());
                e.onNext("1");
                e.onNext("2");
                e.onNext("3");
                e.onNext("4");
            }
        }).observeOn(Schedulers.newThread())
                .subscribeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<String>() {
                    @Override
                    public void onSubscribe(Disposable d) {
                        mDisposable = d;
                    }

                    @Override
                    public void onNext(String value) {
                        Log.e(TAG, "onNext: " + value + "," + Thread.currentThread());
                        if (value.equals("2")) {
                            mDisposable.dispose();
                        }
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onComplete() {

                    }
                });

3.RxJava的操作符

  -创建操作符

  RxJava的创建操作符是用来创建被观察者(Observable)对象和发送事件的

  创建操作符可以分为三大类：基本创建操作符、快速创建和发送事件操作符、延迟创建操作符

  (1)基本创建操作符

     create()

      Observable.create(new ObservableOnSubscribe<String>() {
            @Override
            public void subscribe(ObservableEmitter<String> e) throws Exception {
                Log.e(TAG, "subscribe: " + Thread.currentThread());
                e.onNext("1");
                e.onNext("2");
                e.onNext("3");
                e.onNext("4");
            }
        })；

  （2）快速创建和发送事件操作符
  
       -just()  

       创建一个被观察者对象，并发射传入数据，最多接收10个数据参数

        Observable.just(1, 2, 3)
                .observeOn(Schedulers.newThread())
                .subscribeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Integer>() {
                    @Override
                    public void onSubscribe(Disposable d) {
                        mDisposable = d;
                    }

                    @Override
                    public void onNext(Integer value) {
                        Log.e(TAG, "onNext: " + value + "," + Thread.currentThread());
                        if (value == 2) {
                            mDisposable.dispose();
                        }
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onComplete() {

                    }
                }); 
    
       -fromArray()

        创建一个被观察者对象，并发送传入的数组中的数据事件

        Integer[] nums = {1, 2, 3};

        Observable.fromArray(nums)
                .observeOn(Schedulers.newThread())
                .subscribeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Integer>() {
                    @Override
                    public void onSubscribe(Disposable d) {

                    }

                    @Override
                    public void onNext(Integer value) {
                        Log.e(TAG, "onNext: " + value);
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onComplete() {

                    }
                });
        
        -formIterable() 

         创建一个被观察则对象，并发送传入的集合数据事件

         List<Integer> numList = new ArrayList<>();
        numList.add(1);
        numList.add(2);
        numList.add(3);

        Observable.fromIterable(numList)
                .observeOn(Schedulers.newThread())
                .subscribeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Integer>() {
                    @Override
                    public void onSubscribe(Disposable d) {

                    }

                    @Override
                    public void onNext(Integer value) {
                        Log.e(TAG, "onNext: " + value);
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onComplete() {

                    }
                });
    
    (3)延迟创建操作符

       -defer()
       
       直到有观察者订阅时，才会执行Callable回调，然后在回调里面发送的是最新的数据

       而just,from这类创建操作符是在调用的的时候就存储要发送的数据，即使后面发送的数据变了

       发送的还是老的调用的时候的数据
       
       int i = 0;

        Observable<Integer> observable = Observable.defer(new Callable<ObservableSource<? extends Integer>>() {
            @Override
            public ObservableSource<? extends Integer> call() throws Exception {
                return Observable.just(i);
            }
        });


        i = 1;

        Observer observer = new Observer() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            @Override
            public void onNext(Object value) {
                Log.e(TAG, "onNext: " + value);
            }

            @Override
            public void onError(Throwable e) {

            }

            @Override
            public void onComplete() {

            }
        };

        observable.observeOn(Schedulers.newThread())
                .subscribeOn(AndroidSchedulers.mainThread())
                .subscribe(observer);  
    
    (2)timer()

       创建一个被观察者对象，并且延迟指定时间后，发送一个Long型数据

    (3)interval()   
       
       创建一个被观察者对象，并且每隔一段时间发送一个Long型数据

       数据从0开始依次递增1
    
    (4)intervalRange()

       创建一个被观察者对象，然后每隔一段时间发送一个Long型数据，

       但是可以指定个数的数据，数据从0开始依次递增1 

    (5)range()

       创建一个被观察者对象，发送指定范围的Integer型数据,发送数据一次递增1

    (6)rangeLonge()
    
       创建一个被观察者对象,发送指定范围的Long型数据

    -变换操作符

     变换操作符的作用就是用来对发送的事件进行加工处理(变换),变成其它的事件输出；

     下面我们来学习一下RxJava中常见的变换操作符

     (1)map()

        对被观察者的每一个事件都通过指定的函数处理，从而变成另外一个事件

        Observable
                .just(1,2, 3)
                .map(new Function<Number, String>() {
                    @Override
                    public String apply(Number number) throws Exception {
                        return "0" + number;
                    }
                })
                .subscribe(new Observer<String>() {
                    @Override
                    public void onSubscribe(Disposable d) {

                    }

                    @Override
                    public void onNext(String value) {
                        Log.e(TAG, "onNext: " + value);
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onComplete() {

                    }
                })
        ;
    
    (2)flatMap()

       将被观察者发送的每个事件通过指定的函数进行处理，处理之后变成一个对应的

       Observable对象，然后将这些Observable对象再合并成一个Observable,

       而新的Observable再将合并的事件序列发送给观察者;

       但是注意处理之后合并的事件序列是无序的，和合并前的事件顺序无关，是随机的
    
    (3)concatMap()   

      与flatMap作用一样，只不过发送的事件经过处理之后再合并后的事件序列和处理前的

      事件序列顺序一致;

    (4)buffer()  

       每次从被观察者需要发送的事件序列中取出一定数量的事件放到缓存区中，最终发送

       buffer(count,skip) count表示每次从事件序列中取出的事件的个数

                          skip表示每次取出count之后移动的步数,移动到最后一个元素结

                          束

        buffer(3,1)就表示每次从事件序列中取出3个，每取出一次，向后移动一步                   
         Observable.just(1, 2, 3, 4, 5)
                .buffer(3, 1)
                .subscribe(new Observer<List<Integer>>() {
                    @Override
                    public void onSubscribe(Disposable d) {

                    }

                    @Override
                    public void onNext(List<Integer> value) {
                        Log.e(TAG, "onNext: " + value);
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onComplete() {

                    }
                });
        

        这个例子每次从事件序列中取出3个，每取出一次，向后移动一步   

        打印结果是：

        [1,2,3]
        [2,3,4]
        [3,4,5]
        [4,5]
        [5]

         Observable.just(1, 2, 3, 4, 5)
                .buffer(1,3)
                .subscribe(new Observer<List<Integer>>() {
                    @Override
                    public void onSubscribe(Disposable d) {

                    }

                    @Override
                    public void onNext(List<Integer> value) {
                        Log.e(TAG, "onNext: " + value);
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onComplete() {

                    }
                });

       这个例子每次从事件序列中取出1个，每取出一次，向后移动3步

       打印结果:

       [1]
       [4]  

    -合并操作符

     (1)concat()/conatArray()

        合并多个被观察者，并且将合并后的事件按照顺序发送

        按发送顺序串行执行
 
        conact最多能合并4个被观察者

        concatArray可以合并多个观察者 可以4个以上

         Observable.concat(
                Observable.just(1, 2),
                Observable.just(3, 4),
                Observable.just(5, 6)
        ).subscribe(new Observer<Integer>() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            @Override
            public void onNext(Integer value) {
                Log.e(TAG, "onNext: " + value);
            }

            @Override
            public void onError(Throwable e) {

            }

            @Override
            public void onComplete() {

            }

        });
        
   (2) merge()/mergeArray()

       合并多个被观察者，合并后的事件一起发送，但是合并后的事件顺序是随机的 

       按时间线并行执行

       同样的，merge只能合并最多4个被观察则

       mergeArray可以合并多个被观察者，可以4个以上

    (3) concatDelayError/mergeDelayError

        这两个操作符我们可以结合前面的concat和merge合并操作符;

        前面我们使用了concat和merge合并多个被观察者，如果某个被观察者发送了Error事件，

        则后面的事件是不会再继续发送的;

        而concatDelayError和mergeDelayError和concat和merge的作用一样，都是合并被观察者，

        但是如果某个被观察者发送了Error事件，不会立即被发送，后面的事件还是会继续发送的，

        事件都发送完了，最后再发送onError事件；

    (4) zip()

       合并多个被观察者发送的事件,生成一个新的事件序列(即组合过后的事件序列)

       事件的组合方式 严格按照原先事件序列 进行对位合并
       
       合并后的事件数量等于被观察中数量最少的数量

       Observable<Integer> observable1 = Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(ObservableEmitter e) throws Exception {
                e.onNext(1);
                e.onNext(2);
                e.onNext(3);
            }
        });

        Observable<String> observable2 = Observable.create(new ObservableOnSubscribe<String>() {
            @Override
            public void subscribe(ObservableEmitter e) throws Exception {
                e.onNext("a");
                e.onNext("b");
            }
        });

        Observable.zip(observable1, observable2, new BiFunction<Integer, String, Object>() {
            @Override
            public Object apply(Integer integer, String s) throws Exception {
                return integer + s;
            }
        }).subscribe(new Observer<Object>() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            @Override
            public void onNext(Object o) {
                Log.e(TAG, "onNext: " + o);
            }

            @Override
            public void onError(Throwable e) {

            }

            @Override
            public void onComplete() {

            }
        });
        
        打印结果：

        1a
        2b

        根据打印结果也验证了合并的事件序列是按照原先的事件序列对位合并的，

        并且合并后的事件个数是被观察者中数量最少的数量

    (5) combineLatest()
    
        这个操作符也是用来合并被观察者的事件的，只不过与zip一一对位合并不一样的是，

        combineLatest在某个观察者发送事件的时候，会将这个事件与其他观察者最新的事件

        进行合并，如果其他观察者没有发送事件，则不会合并也不会回调onNext;

          Observable<Integer> observable1 = Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(ObservableEmitter e) throws Exception {
                e.onNext(1);
                e.onNext(2);
                e.onNext(3);
            }
        });

        Observable<String> observable2 = Observable.create(new ObservableOnSubscribe<String>() {
            @Override
            public void subscribe(ObservableEmitter e) throws Exception {
                e.onNext("a");
                e.onNext("b");
                e.onNext("c");
            }
        });

        Observable.combineLatest(observable1, observable2, new BiFunction<Integer, String, Object>() {
            @Override
            public Object apply(Integer integer, String s) throws Exception {
                return integer + s;
            }
        }).subscribe(new Observer<Object>() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            @Override
            public void onNext(Object o) {
                Log.e(TAG, "onNext: " + o);
            }

            @Override
            public void onError(Throwable e) {

            }

            @Override
            public void onComplete() {
                Log.e(TAG, "onComplete: ");
            }
        });

        打印结果:

        3a
        3b
        3c

        因为在observable1发送方事件的时候,observable2没有发送事件，所有没有合并，也没有回调onNext,而

        当observable2发送事件的时候，会将事件与observable1最新也就是最后发送的数据3进行合并，所以最后

        打印结果是 31,3b,3c

    (6)comnineLatestDelayError
    
       这个和前面的coacatDelayError以及mergeDelayError是一样的道理，就是在combineLatest的作用的基础上

       继续发送Error之后的事件，并且最后发送Error事件

    (7)reduce()
    
       将被观察者需要发送的事件聚合成一个事件发送

       聚合的逻辑根据需求，但是本质上都是前两个数据聚合，然后聚合的结果继续与下一个数据聚合

       Observable.just(1, 2, 3).reduce(new BiFunction<Integer, Integer, Integer>() {
            @Override
            public Integer apply(Integer o, Integer o2) throws Exception {
                return o + o2;
            }
        }).subscribe(new MaybeObserver<Integer>() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            @Override
            public void onSuccess(Integer integer) {
                Log.e(TAG, "onSuccess: " + integer);
            }

            @Override
            public void onError(Throwable e) {

            }

            @Override
            public void onComplete() {

            }
        });

        打印结果：

        6

    (8)collect()
    
       将被观察者发送的事件收集到一个数据结构里

        Observable
                .just(1, 2, 3)
                .collect(new Callable<List<Integer>>() {
                    @Override
                    public List<Integer> call() throws Exception {
                        return new ArrayList<>();
                    }
                }, new BiConsumer<List<Integer>, Integer>() {
                    @Override
                    public void accept(List<Integer> integers, Integer integer) throws Exception {
                        integers.add(integer);
                    }
                }).subscribe(new Consumer<List<Integer>>() {
            @Override
            public void accept(List<Integer> integers) throws Exception {
                Log.e(TAG, "accept: " + integers);
            }
        });

        打印结果

        [1,2,3] 

    (9) startWith()/startWithArray()
    
        在每一个被观察者发送事件前，追加一些事件或者被观察者        

        Observable.just(1, 2, 3)
                .startWith(0)
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(Integer integer) throws Exception {
                        Log.e(TAG, "accept: " + integer);
                    }
                });

        Observable.just(1, 2, 3)
                .startWith(Observable.just(0))
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(Integer integer) throws Exception {
                        Log.e(TAG, "accept: " + integer);
                    }
                });


        以上代码分别添加了一个数据事件和一个被观察者        
        
        打印结果都是:

        0
        1
        2
        3
    
    (10) count()

    统计发送事件的数量

    Observable.just(1, 2, 3)
                .count()
                .subscribe(new Consumer<Long>() {
                    @Override
                    public void accept(Long aLong) throws Exception {
                        Log.e(TAG, "accept: " + aLong);
                    }
                });

    打印结果
    
    3            

    -功能性操作符

     (1) subscribe()

         连接观察者和被观察者形成订阅关系

     (2) subscribeOn()/observerOn()

         默认情况下,被观察者和观察者都是工作在所创建的线程下，也就是说在哪个线程被创建就在哪个线程下工作;

         而subscribeOn和observerOn就是用来切换被观察者和观察者工作的线程;

         RxJava中内置了多种用于调度的线程类型:

         Schedulers.immediate()          当前线程=不指定线程   默认

         AndroidSchedulers.mainThread()  Android主线程         操作UI

         Schedulers.newThread()          普通新线程            耗时等操作

         Schedulers,io()                 io操作线程            网络请求，读写文件等io密集型操作

         Schedulers.computation()        CPU计算操作线程       大量计算操作

         RxJava内部使用线程池来维护这些线程，所以线程调度的效率是非常高的

    (3)delay()

       使得被观察者延迟一段时间再发送事件

        Observable.just(1, 2, 3)
                .delay(2000, TimeUnit.MILLISECONDS)
                .subscribe(new Observer<Integer>() {
                    @Override
                    public void onSubscribe(Disposable d) {

                    }

                    @Override
                    public void onNext(Integer integer) {
                        Log.e(TAG, "onNext: " + integer);
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onComplete() {

                    }
                });     
        
        (4)do系列操作符

           do系列操作符相当于给Observable在执行的各个阶段添加回调，当Observable执行到这个阶段时，这些回调

           就会被调用;

           doOnNext  当Observable没发送一个数据时，doOnNext首先被回调，然后再回调onNext

           doAfterNext 当onNext被调用后，会回调doAfterNext

           doOnError   发送onError事件时，doOnError先回调，然后回调onError

           doOnCompleted 正常发送事件完毕后回调doOnCompleted,然后回调onComplete

           doOnTerminate 无论正常发送完毕还是异常终止都会回调doOnTerminate

           doFinally 最后执行

           doOnSubscribe 观察者订阅时执行

           doOnUnSubscribe 观察者取消订阅时调用

       (5)对Observable流进行整体的变换，一般用于把一个或多个操作符封装起来，便于复用

           例如切换线程总是需要两个操作符操作:

           subscribeOn(Schedulers.io())
           .observeOn(AndroidSchedulers.mainThread())            

           我们可以把这两步操作放到一个方法中返回一个ObservableTransformer,

           然后使用compose操作符即可；

           ObservableTransformer schedulersTransformer() {

            return new ObservableTransformer() {
               @Override
               public ObservableSource apply(Observable upstream) {

                  return  ((Observable)  upstream).subscribeOn(Schedulers.io())
                        .unsubscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread());


            };
        };
           
           Observable.create(new ObservableOnSubscribe<Object>() {
            @Override
            public void subscribe(ObservableEmitter<Object> e) {

                    e.onNext(1);

            }
        })
          .compose(schedulersTransformer()) //compose操作对Observable进行变换

          .subscribe(new Observer<Object>() {
                    @Override
                    public void onSubscribe(Disposable d) {
                        
                    }

                    @Override
                    public void onNext(Object value) {
                        Log.e(TAG, "onNext: "+value);
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onComplete() {

                    }
                }); 

3.RxJava内存泄漏解决

  但我们使用RxJava执行耗时的异步操作时，当退出界面Activity时，也就是Activity销毁时，但是由于耗时操作还在执行

  Activity无法被释放，就会出现内存泄漏；

  解决方法：

  -在onSubscribe拿到Disposable对象,在Activity的onDestory生命周期中调用dispose()方法，

   切断观察者与被观察者的订阅关系

   但是如果一个界面中有多个RxJava操作，则就要在onDestory中调用多个Disposable.dispose()

   切断所有订阅关系

 -使用CompositeDisposable 保存所有的Disposable,在Activity的

  onDestory生命周期函数中，调用CompositeDisposable.disposable()

  方法,切断所有的订阅关系

 -使用RxLifeCycle 将RxJava操作与Activtiy/Fragment的生命周期绑定起来

  在指定的生命周期中切断订阅关系

  实现原理： (1)首先BaseActivity中定义一个:

            BehaviorSubject<ActivityEvent>  lifecycleSubject 也就是一个Observable对象

            实现LifeProvider接口，实现相应方法

            @Override
    public final Observable<ActivityEvent> lifecycle() {
        return lifecycleSubject.hide();
    }

    @Override
    public final <T> LifecycleTransformer<T> bindUntilEvent(ActivityEvent event) {
        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
    }

    @Override
    public final <T> LifecycleTransformer<T> bindToLifecycle() {
        return RxLifecycleAndroid.bindActivity(lifecycleSubject);
    }
            
           （2）在Activity的各生命周期内调用Observable发射对应的生命周期事件

                  @Override
                 protected void onDestroy() {

                  lifecycleSubject.onNext(ActivityEvent.DESTROY); 

                 }

            (3)在使用时，被观察者使用compose操作符,来实现源Observable与组件的绑定
               
               LifecycleTransformer apply方法中使用了takeUtil操作符

               也就是一旦我们的生命周期中的lifecycleSubject.onNext(ActivityEvent.DESTROY); 

               执行，也就是第二个Observable lifecycleSubject发送了事件，则丢弃源观察者发射的任何事件

               compose(bindToLifecycle())

4.RxJava中的背压策略

  我们知道RxJava是用来处理异步操作的，所谓异步，也就是被观察者和观察者处于不同的

  线程中；

  那么被观察者与观察者处于不同的线程，就可能会出现，观察者发送事件速度与接受者接收事件

  的速度不匹配的情况; 因为处于不同的线程，被观察者发送一个事件后，不会等到观察者接收并

  处理完事件后，再发送下一个事件，而是不断的发送事件，直到发送完毕;

  如果被观察者发送事件的速度大于被观察者接收处理事件的速度，那么被观察者发送的事件实际

  上是放到缓冲区的，等待观察者从缓冲区取出事件处理；

  但是如果被观察者发送事件的速度太快，导致缓冲区满了，最终就会溢出，导致事件丢失或者

  OOM;

  出现这种情况我们就可以使用背压策略

  RxJava提供了Flowable，以及背压策略来解决上述观察者发送事件速度与被观察者

  接收速度不匹配导致的事件丢失或者OOM问题

  -异步处理情况下的背压

   因为我们上述已经说明了，背压策略是用来解决异步情况下速度不匹配导致的事件

   丢失和OOM问题，所以下面我们就来针对异步订阅情况下学习背压策略；

   (1)控制观察者接收事件的速度

      对于异步订阅情况，若观察者没有设置Subscrition.request(long n)方法，说明

      观察者不接收事件；

      此时被观察则可以发送事件（存在缓存区,缓存区默认大小为128），等待被观察者需要时取出被观

      察者事件;

      当缓存区满是大于128时，如果我们的背压策略是BackPressureStragty.ERROR,则会溢出报错;

      当观察者有需要时，调用request(long n),会从缓冲区中取出事件

       Flowable.create(new FlowableOnSubscribe<Object>() {
            @Override
            public void subscribe(FlowableEmitter<Object> e) throws Exception {
                e.onNext(1);
                e.onNext(2);
                e.onNext(3); //发送3时，就会溢出报错
            }
        }, BackpressureStrategy.ERROR)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Subscriber<Object>() {
            @Override
            public void onSubscribe(Subscription s) {
                Log.e(TAG, "onSubscribe: " );

                s.request(2);

            }

            @Override
            public void onNext(Object o) {
                Log.e(TAG, "onNext: "+o);
            }

            @Override
            public void onError(Throwable t) {
                Log.e(TAG, "onError: " );
            }

            @Override
            public void onComplete() {
                Log.e(TAG, "onComplete: ");
            }
        });
    
    (2) 使用背压策略

        在创建Flowable的时候会需要传入背压策略,背压策略有以下几种：

        -BackPressureStragety.ERROR 

        当被观察者发送事件的速度大于观察者接收事件的速度，事件被放到缓冲区，

        当缓冲区满时达到128个事件时，还继续发送事件时，就会溢出报错 MissingBackpressureException

        -BackPressureStrategy.MISSING

         当被观察者发送事件的速度大于观察者接收事件的速度，事件被放到缓冲区，

         当缓冲区满时达到128个事件时，还继续发送事件时，也会溢出报错，但是会提示

         缓冲区已满

         io.reactivex.exceptions.MissingBackpressureException: Queue is full?!

        -BackPressureStrategy.BUFFER
        
         当被观察者发送事件的速度大于观察者接收事件的速度，事件被放到缓冲区，

         当缓冲区满时达到128个事件时，还继续发送事件时,则会将缓冲区大小设置无限大

         但是要注意，防止出现OOM

        -BackPressureStrategy.DROP
        
         当被观察者发送事件的速度大于观察者接收事件的速度，事件被放到缓冲区，

         当缓冲区满时达到128个事件时，还继续发送事件时,超过缓冲区大小的事件

         会被丢失；

         如发送了150个事件，仅会保存1-128的事件,129到150的事件会被地市 

        -BackPressureStrategy.LATEST
         
         当被观察者发送事件的速度大于观察者接收事件的速度，事件被放到缓冲区，

         当缓冲区满时达到128个事件时，还继续发送事件时,会保存缓冲中事件，以及

         最后一个事件(最新的一个事件)

         如发送了150个事件，会保存1-128以及150这个事件   







     

  























  


 


   

   

           
































    

        



