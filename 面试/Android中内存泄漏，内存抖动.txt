1.Android中内存泄漏，内存抖动 

内存泄漏：

程序中动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费。

常表现为长生命周期对象持有短生命周期对象的强引用，从而导致短生命周期对象无法被

回收。

内存抖动：程序在运行过程中，频繁的创建和销毁对象,严重的话会导致应用卡顿。

         主要表现为在循环中创建对象，导致短时间内有大量的对象创建和回收

         如果严重的话，就会导致应用卡顿。

-先来了解一下Java中的四种引用： 

强引用:  new  GC是不会回收强引用对象的

软引用: 如果内存够,GC并不会回收软引用,当内存不够的时候，GC会回收软引用 

 Object testObject=new Object
 SoftReference<Object> softReferenceObject = new  SoftReference<>(object); 

        
弱引用： 一旦内存不够的时候,GC会回收掉弱引用


Object object1 = new Object();
System.gc();
WeakReference<Object> weakReferenceObject = new WeakReference<>(object1);

虚引用:  

-Java GC

Oracle JDK Open JDK找那个的虚拟机都是Hotspot     

Android 中的虚拟机为Davlik和Art

GC只在Heap(堆)剩余空间不够时才会进行垃圾回收	

GC回收机制：如果一个对象没有被任何对象引用，就会被GC回收

怎么判断一个对象是垃圾对象?

GC算法：

曾今的引用算法： 引用计数算法

每一个对象都一个引用计数，每当对象被另外一个对象引用时，引用数加1，每当引用减少时，引用数减1，当对象

引用数为0时，就认为这个对象不再被使用，也就是垃圾对象。

引用计数算法有一个明显的问题两个对象互相引用对方的问题。

现在的GC算法

标记回收算法(Mark-Sweep):

从"GC Roots"集合开始,将整个内存遍历一遍，保留所有可以被GC 

Roots直接和间接引用的对象，其它对象都被当作垃圾对象

回收。这个算法需要中断进程中其它组件的执行，并且会产生内存碎片。

GC Roots就是根对象,哪些对象是根对象呢?

根对象通常是以下四类对象：

（1）方法中的局部变量

 (2) 活动的线程(包括主线程和应用程序创建的子线程)

 (3) static变量-静态变量

 (4) JNI中的引用


复制算法(Copying):

将内存空间分为两块,每次只使用其中的一块,在垃圾回收时，将正在使用的内存中的存

活对象移动到未被使用的内存块中，

之后清除正在使用的内存块中的所有对象，交换两个对象的角色，完成垃圾回收。


标记-压缩算法(Mark-Compact):

先从"GC Roots"遍历出所有的存活对象，进行标记，然后将这些标记过的存活对象，

压缩到内存的一端，之后清理边界外所有空间

，这种算法避免了碎片的产生，又不要将内训空间分成两块。

分代算法：

将内存空间分为 年轻代，年老代，永久代  

新创建的对象都会被放在年轻代内存区域，年轻代内存区域会较为频繁的进行垃圾回，每次回收完存活下来的对象寿命计数加1，当

年轻代中的存活对象的寿命计数达到一定值的时候就会被移动到年老代内存区域，年老代内存区域会进行较少的垃圾回收行为。

永久代内存区域不会进行垃圾回收，一半存放生命周期为整个应用运行期间的对象，如静态常量等。

Java中的堆

Java的JVM内存分为分为3个区，堆(heap)，栈(stack)，方法区(method)

-基本数据类型直接在栈中进行分配。

-引用数据类型，需要使用new关键字来创建，都是在栈中分配一个地址空间

 然后在堆空间分配对象的类变量。

-方法区主要存放加载的类的信息，静态变量，常量。

-Dalvik虚拟机

 在Android 5.0之前Android系统都是使用的Dalvik虚拟机，在Android 

 FVVXVC5.0之后Android系统使用的都是ART(Android Run Time)虚拟机

 先来了解学习Dalvik虚拟机

(1)Java 堆

书：深入理解Java虚拟机:周志明

-Dalvik虚拟机是Google专门为Android系统开发的一个虚拟机,它支持.dex格式的Java应用程序的运行

.dex格式是专门为Dalvik设计的一种压缩格式，适合内存和处理器速度有限的系统

-程序的执行：解释和编译

 我们知道我们程序员编写的代码叫做源码，源码计算机是无法执行的，必须要转成计算机可以识别

 的机器码才能执行。将源码转成机器码有两种做法就是： 解释和执行

 解释：源程序由程序解释器边扫描边翻译执行，这种方式不会产生目标文件，因此程序多次执行就会

 需要多次重复解释多次

 编译：通过编译器将源程序编译成用机器语言表示的与之等价的目标程序，因此这种方式只需要编译一次，得

 到的产物可以反复执行。

 许多脚本语言如JavaScript就是解释型语言，在开发过程中不涉及任何编译过程，

 而对于C/C++这类静态编译语言，就需要编译成机器对应的机器码目标程序

 解释型语言通常都具有一个优点就是跨平台,因为这些语言由解释器承担了不同平台的兼容工作，

 相反编译型语言的编译产物都是与平台对应的,windows平台上编译出来的C++可执行文件不能够

 在linux或者Mac上运行。那么解释型语言需要在运行时一边解释一边运行，所以运行效率就慢了。

 而我们的Java语言，是一种介于完全解释和静态编译之间的语言，因为无论是JVM上的class文件

 还是Dalvik上的dex文件，这些文件都是经过词法和语法分析的中间产物,但是这些产物与C/C++编译

 得到的产物还不一样，因为Java语言的编译产物只是一个中间产物，并没有对应到机器码，在运行时

 还需要虚拟机进行解释或者进一步的编译。

 有些Java虚拟机只包含解释器，有些只包含编译器。在Dalvik的早期版本只包含解释

 器，从Android2.2

 开始包含了JIT编译器。

 -Dalvik上的垃圾回收

  垃圾回收是Java虚拟机最为重要的一个特性

  Davlik的垃圾回收主要在以下几个方面进行回收：

  (1)堆中无法再创建对象的时候

  (2)堆中的内存使用率达超过一定的阈值的时候

  (3)程序中通过Runtime.gc()主动GC的时候

  (4)在OOM发生之前

  Dalvik虚拟机采用的是标记-清除算法来进行垃圾回收的，

  进行垃圾回收前首先要暂停其它所有线程

  然后从GC Root集合开始遍历整个内存，保留被GC Root直接或者

  间接引用的对象，其它所有对象都被回收。

  由此我们知道Dalvik虚拟机在进行垃圾回收的时候回暂停其它所有线程，而这个

  在程序运行过程中几乎是不能容忍的，这个暂停会造成程序的卡顿，并且这个卡顿

  会伴随着每次垃圾回收而存在，这也是为什么早期Android系统非常卡顿的原因。

  也是Google使用新的虚拟机来彻底替代Dalvik的原因之一。

-ART虚拟机

Android 5.0之前使用的都是Dalvik虚拟机，而Android 5.0之后使用的都是

ATR虚拟机，为什么Dalvik虚拟机被淘汰了，主要有以下几个原因：

(1)Dalvik虚拟机是为32位设计的，不适用64位

(2)Dalvik虚拟机中的解释器和JIT编译器都是在单次运行中发生，每运行一次

   可能都需要重新做这些工作，效率不高。

(3)Dalvik虚拟机的垃圾回收机制 标记-清除算法 不是很友好，需要暂停其它
   
   线程。

基于以上几个原因，Dalvik被淘汰也是理所应当的。 

ART虚拟机主要也是对上面几个缺点进行了改进

-首先肯定是支持了64位CPU

-ART引入了AOT编译，在安装APK文件时，将APK文件中的dex文件编译成了

 包含机器码的oat文件，这样在运行程序时就不需要编译，增加了运行效率。

-对垃圾回收算法进行了改进 

但是AOT编译会带来两个问题：

-应用的安装速度比较慢

-系统在进行升级之后，又需要重新进行编译所有的应用
 
 导致每次升级应用都要等待很长的时间

于是Android 7.0又加入了JIT编译器,ART组合使用了AOT和JIT,

-在安装APK的时候不再编译，而是在程序运行的时时候前几次都是使用解释模式

经常执行的方法将会被JIT编译，

-当设备处于空闲并正在充电时，编译守护进程会根据第一次运行期间生成的Profile

文件对常用代码运行AOT编译

2.Android应用程序排查内存泄漏

 (1)使用第三方库LeakCanary来检测内存泄漏 

    

 (2)使用Android Studio自带的 Profiler中的Memory Profiler

    来查看Java堆内存的分配和对象的引用情况来排查内存泄漏















        















 


 






