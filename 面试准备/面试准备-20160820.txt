1.Java中的修饰符
-类
public:公共类 表示在项目的任何地方都可以使用这个类
abstract:抽象类 抽象类中可以有抽象方法(抽象方法:使用abstract修饰符修饰的方法并且没有方法体)
default(缺省的、默认的修饰符),这样类，只能是在同一个包下可以使用
final：最终类，最终类是不能被继承的
-成员变量
public：公共方法，可以通过对象名.来访问
private:私有的方法，
default:(缺省的,默认的修饰符)在同一个包下，可以通过对象名.来直接使用
protected:受保护的，在子类中以及同一个包下，可以使用
final常量,常量在初始化的时候赋值，不能修改
static:静态成员变量，静态变量是类级别的变量，可以通过类名直接访问
-成员方法
public:公共方法，可以通过对象名.直接访问
private:私有方法
default：(缺省的、默认的修饰符)：在同一个包下可以使用
abstract：抽象方法，没有方法体
final:最终方法，最终方法不能够别重载
static:静态方法，类级别的方法，可以通过类名直接调用
synchronized:同步修饰符，在多线程下调用该方法时，方法会被加锁，线程访问结束后，方法被解锁。

2.Java中抽象类
  抽象类是不能够通过构造方法直接实例化的
  
3.Java创建对象时的内存分配
Person person=new Person()
Person person这句代码实际上是分配了一个栈内存空间,存放perosn对象
new Person()这句代码实际上是分配了一个堆内存空间，用于存放perosn对象的内容
栈内存空间里的对象指向堆内存空间

4.接口
接口中的成员变量都是公共、静态、常量 public static final 
接口中的方法都是公开的方法 public 
在定义接口中的时候，成员变量和成员方法不加修饰符，成员变量默认的修饰符也是public static final
成员方法默认的修饰符也是public

5.algorithm(算法)
  常见的排序算法：  时间复杂度
  冒泡排序      	o(n^2)
  选择排序 	        o(n^2)	
  快速排序  		o(nlogn)
  
6.Activity的加载模式
  Android系统是使用Task来管理Activity的，采用先进先出的方式来管理
  四种加载模式,在AndroidManifest.xml中的Activtiy的注册中进行配置加载模式 android:launchMode=""
  -standard 标准模式，也是Activity默认的加载模式
  每次启动该目标Activity时都会创建Activity的实例
  -singleTop 栈顶单例模式 
   如果启动的目标Activity实例已经存在，并且是位于Task栈顶的，则不会创建Activity的实例，直接使用已有的Activity实例即可
   如果启动的目标Activity实例不存在，或者是存在但是不是位于Task栈顶，则系统会创建一个新的目标Activity实例
  -singleTask 栈内单例模式
	如果启动的目标Activity的实例不存在，则会创建一个新的Activity实例
	如果启动的目标Activity实例存在，但是不是位于Task栈顶，那么系统会移除Task内处于目标Activity之上的所有Activity,从而使目标Activity位于栈顶，显示出来
	如果启动的目标Activity的实例已经存在，并且是位于Task栈顶，则直接使用该Activity实例即可
  -singleInstance 全局单例模式
    如果启动的目标Activity实例不存在，则系统会创建一个Task，然后再创建一个Activity实例，使其位于Task栈顶
    如果启动的目标Activity实例存在，则让该实例所在Task转到前台，从而使Activity显示出来
7.Handler消息传递机制
  Handler的消息传递机制中的对象：Handler、Looper、MessageQueue、Message
  Handler的消息传递机制的工作原理：
  Handler对象发送消息到指定的MessageQueue中，Looper对象调用loop方法从MessageQueue中取出消息，交给发送该消息的Handler对象处理。
  
  Handler对象发送消息   在一个线程中
  
  Looper对象取消息
  Handler对象处理消息
  这两个过程在一个线程中  
 
  -子线程发送消息到主线程
  在主线程中创建一个Handler对象，重写handleMessage方法
  在子线程中通过Handler对象发送消息
  -主线程发送消息到子线程
  在子线程中创建一个Handler对象，调用Looper的prepare方法创建Looper对象，调用Looper的loop方法启动Looper
  在主线程中通过该Handler对象发送消息

  以上是主线程与子线程之间的消息传递
  思考：子线程与子线程之间的通信？
  也可以通过Handler消息传递机制，来实现两个子线程之间的通信。
  
8.Java中抛出异常和捕获异常的区别
	
	
	
   
  
  
  
  

  