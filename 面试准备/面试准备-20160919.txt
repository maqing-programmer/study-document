1.RxJava

RxJava的本质就是一个实现“异步”操作的库。

同样是做异步，为什么人们用它，而不用现成的 AsyncTask，Handler
一个词：简洁。

RxJava的GitHub地址:
https://github.com/ReactiveX/RxJava 
https://github.com/ReactiveX/RxAndroid 

-RxJava的异步实现，是通过一种扩展的观察者模式来实现的。
    RxJava的观察者模式:
    Observable(被观察者),Subscribers(观察着)
    Observable发出一系列事件,Subscribers处理这些事件。

-RxJava的基本实现
    (1)创建Observable(被观察者)
      Observable observable=Observable.create(new Observable.OnSubscribe<String>(){
       public void call(Subscriber<? super String> subscriber){
             subscriber.onNext("Hello World"); //发出事件   
             subscriber.onCompleted(); 
       }
      }); 
(2)创建观察者
      Subscriber subscriber=new Subscriber<String>{
        public void onNext(String s){
               Log.i(TAG,s);
        }
        public void onCompleted(){
    
        }
        public void onError(Throwable e){

        }
    
      };  
  
 (3)通过subscribe()方法，将观察者与被观察者之间建立关联 。
   
     observable.subscribe(subscriber);

     当通过subscribe()方法将Observable与Subscriber建立关联之后,Observable的call(subscriber)  方法就会被回调，在Observable的call(subscriber)方法中,可以发送事件,调用Subscriber的onNext()方法发送事件，调用onCompleted()表示事件发送结束。
     然后Subscriber的onNext()方法,onCompleted()方法会被回调,在回调方法中我们完成事件的消费。

  -Observable的其它创建方法
   (1)Observable的just(T....)方法创建Observable对象
   Observable observable=Observable.just("Hello","world","Linda");

   相当于:  Observable observable=Observable.create(new Observable.OnSubscribe<String>(){
     public void call(Sbscriber<? super String> subscriber){
                      subscriber.onNext("Hello");
                      subscriber.onNext("World");
                      subscriber.onNext("Linda");
                      subscriber.onCompleted();
     }

   })

   (2)Observable 的from(T[])方法创建Observable对象
      String words[]={"Hello","World","Linda"};
      Observable observable=new Observable.from(wrods);      
      与上面just()方法是等价的.

  
   前面说过是通过subscribe()方法建立关联,observabler.subscribe(subscriber);
   subscribe()方法还支持不完整定义，RxJava会根据定义自动创建出Subscriber。
   
   Action1<String> onNextAction=new Action1<String>(){
   public void call(String s){
      Log.i(TAG,s);
    }
   }；

   Action1<Throwable> onErrorAction=new Action1<Throwable>(){
  
      public void call(THrowable throwable){
          //Error 处理
      }

   };

   Action0 onCompletedAction=new Action0(){
   	public void call(){

   	}

   };
  
  onservable.subscribe(onNextAction);  //自动创建Subscriber,并且使用onNextAction来定义onNext()

  或者 observable.subscribe(onNextAction,onErrorAction;
  //自动创建Subscriber,并且使用onNextAction和onErrorAction来定义onNext()和onError()

  或者 observable.subscribe(onNextAction,onErrorAction,onCompletedAction);
  //自动创建Subscriber,并且使用onNextAction(),onErrorAction和onCompletedAction来定义
    onNext(),onError()和onCompleted()

  


2.RxJava中的Scheduler 线程控制
在不指定线程的情况下，RxJava遵循的是线程不变的原则，即：在哪个线程中调用subscribe(),就在
哪个线程中生产事件;在哪个线程中生产事件，就在哪个线程中消费事件，如果需要切换线程，就需要用到
Scheduler

-Scheduler的API
 在RxJava中,scheduler相当于线程调度器，RxJava通过它来指定每一段代码应该运行在什么样的线程中。
 RxJava已经内置了几个Scheduler,它们适合于大多数的使用场景：

 (1)Schedulers.immediate() 直接在当前线程运行，相当于不指定线程，这就是默认的Scheduler
 (2)Scheduler.newThread() 总是启用新线程，并在新线程中执行操作
 (3)Scheduler.io() I/O操作(读写文件，读写数据库，网络信息交互等)所使用的Scheduler,行为模式
    和newThread()差不多，区别在于io()的内部实现是用一个无数量上限的线程池，可以重用空闲的线程
    因此在多数情况下io()比newThread()更有效率
 (4)Scheduler.computation() 计算所使用的Scheduler 
    这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。
 (5)AndroidSchedulers.mainThread() 指定操作在Android主线程中执行

 有了这几个Scheduler，就可以使用subscribeOn()和observeOn()这两个方法来对线程进行控制，
 subscribeOn()指定subscribe()所发生的线程，即Observable的onSubscribe被激活时所处的线程，
 observeOn()指定Subscriber所运行在的线程，或者叫事件消费的线程。

Observable.just(1,2,3,4)
.subscribeOn(Scheduler.io())  //指定事件发送发生在IO线程
.observeOn(AndroidSchedulers.mainTHread())  //指定事件消费发生在主线程
.subscribe(new Action1(Integer){
	public void call(Integer number){
	Log.i(TAG,"number="+number);
	}
});

上面代码指定事件发送发生在IO线程，所以 1,2,3,4,内容发送发生在IO线程,
指定事件消费发生在主线程。

3.RxJava中的操作符(Operator)
  RxJava提供了对事件序列进行变换的的支持，所谓的变换就是将事件序列中的对象或者
  整个序列进行加工处理，转换成不同的事件或者是事件序列。

  操作符是在Observable和最终的Subscriber之间修改Observable发出的事件

  (1)map操作符
  Observable observable=Observable.just("images/logo.png"); //最初的事件:字符串images/logo.png

  observable.map(new Func1<String,Bitmap>(){
  
      public Bitmap call(String filepath){    
      
         return getBitmapFromPath(filePath);  //返回Bitmap  //修改事件，有字符串变为Bitmap
     }
  }).subscribe(new Action1<Bitmap>{
  
     public void call(Bitmap bitmap){//接收的事件为Bitmap
  
             showBitmap(bitmap)  //消费事件
     }

  });
  
这里就通过map操作符，将最初的字符串事件在中间变成了Bitmap事件，最终Subscriber接收到
的是Bitmap事件。