1.Git
-分支管理
主分支(master分支),用来部署生产环境的
-开发分支
在Git中每一个分支都代表一个独立的项目，有着各自的版本管理。
代码在开发过程中根据需要创建的分支称之为开发分支。
开发分支是并发的，独立互不影响的。
开发完成后，开发分支单独测试，测试通过后，合并到主分支。
-Git常用命令：

git config --global user.name ""
git config --global user.email ""
配置用户名和邮箱

-git clone <url>
把远程仓库克隆到本地

-git branch 
查看本地有哪些分支
git branch -v
查看当前处于哪个分支
git branch -a
查看远程有哪些分支，会列出本地以及远程仓库分支，绿色为本地分支,红色的为远程分支。

-git status
查看本地文件的修改情况
如果你没有修改过文件，你什么也看不到
如果你修改过文件，修改的文件会被列出，并且显示为红色。

-git diff
查看文件具体的修改情况，做了哪些修改。
git diff查看的是没有添加到暂存区的文件的修改情况，如果文件已经被添加暂存区了，
想要查看文件具体的修改情况的话，可以使用 git diff --cached命令。

-git add
把修改的文件添加到暂存区
修改的文件只有添加到了暂存区后，才能够提交

-git reset
是git add的可逆操作,
如果把文件添加到暂存区之后，又不想提交文件，但是已经git add了，就可以使用git reset来撤销git add

-git commit
提交修改的文件
git commit -m "提交描述"

如果我们不小心提交了一个不需要提交的文件，可以使用如下命令来撤销提交。
git reset -hard commit_id

-git checkout 
-切换分支
git checkout branchName
-撤销对文件的修改
如果我们对文件进行了修改,但是不打算提交它，想撤销对该文件的修改
git checkout a.txt,文件就回到了修改前的状态。

-git push
把分支推到仓库
git push origin story6335

-git branch -D branchName
删除一个本地分支，如果某个分支正在被使用，是删除不掉的，只有某个分支没有在使用才能够被删除。

删除远程分支
git push origin --delete branchName

-origin
 origin就是默认的远程版本库名称,origin指向的就是本地的代码在git服务器上的版本 
-git fetch 
 就是获取最新远程版本库到本地
 git fetch origin 

-git pull
 获取最新的远程版本库到本地并且merge到本地
 
2.Service
Service是Android系统四大组件之一,Service是没有界面的,主要用于在后台执行操作的
开发Service的步骤:
-创建一个类继承自Service基类
-在AndroidManifest.xml文件中注册Service

Service有两种，一种是启动的Servcie，一种是绑定的Servcie。
-启动的Service
 启动的Service是通过调用Context的startService()方法启动的，通过这种方法启动的Service，访问者与Service
 之间没有关联，即使访问者退出了，Service也仍然在运行。
 启动的Service的生命周期： onCreate()--->onStartCommand()--->onDestroy()
 当Service第一次被启动时，onCreate()、onStartCommand()被调用
 如果Service已经启动了,再次调用startService()方法时，onCreate()方法不会被调用,而onStartCommand()方法会被调用,每次执行startService()方法,都会调用onStartCommand()方法
 调用stopService()方法关闭Service,onDestroy()方法会被回调
-绑定的Service
 绑定的Service是通过调用Context的bindService()方法绑定的，通过这种方法绑定的Service,访问者与Service绑定在一起，访问者如果退出了，Service也就终止了。
 绑定的Service的生命周期：onCreate()--->onBind()--->onUnbind()--->onDestroy()
 当Service第一次被绑定时，onCreate()、onBind()方法会被调用。如果Service已经被绑定的了，再次调用bindService()方法,onCreate()、onBind()方法都是不会被调用的,
 调用unBindService()方法取消绑定Service时,onDestroy()方法被回调。

IntentService
 学习IntentServcie之前先回顾一下Service
 -Service不会启动一个单独的进程，Service与其所在的应用程序处于同一个进程中。
 -Service不是一条新的线程。在Service中执行耗时操作，需要开启子线程。

IntentService是Service的子类，IntentService是也一个抽象类。
IntentService中有一个onHandleIntent(Intent intent)方法，IntentService会创建一个单独的线程来处理这个方法里的代码，所以可以将耗时操作放在这个方法里
使用IntentService与使用Service的步骤是一样的：
-创建一个继承自IntentService基类
-在AndroidManifest.xml文件中注册IntentService

与使用Service一样，可以通过Context的startService()方法启动IntentService: onCreate()--->onStartCommand()--->onHandleIntent()--->onDestroy()
但是这里与Service不同的是，当我们调用startService方法启动Service时，onCreate())--->onStartCommand()--->onHandleIntent()
当onHandleIntent()方法中的代码执行完之后，IntentService会自动终止，onDestroy()方法被回调，无需手动调用stopService()方法来终止IntentService()

如果通过Context的bindService方法绑定IntentService,这个就与绑定Service是完全一样的 onCreate()--->onBind()--->onUnBind()--->onDestroy()
onHandleIntent()方法是不会被被调用的。

3.BroadcastReceiver(广播接收者)
  -BroadcastReceiver是Android系统的四大组件之一，是一个全局监听器，用于监听系统的全局广播消息的。
  
  -BroadcastReceiver与OnXXXListener这类监听器有什么区别:
   OnXXXListener这类监听器是程序级别的监听器，这类监听器运行在程序所在进程中，一旦程序退出了，监听器也就关闭了。
   而BroadcastReceiver是系统级别的监听器，拥有自己的进程，只要存在与之匹配的Intent被广播出来，BroadcastReceiver就会被激发。
  
  -启动BroadcastReceiver
   创建启动BroadcastReceiver的Intent
   调用sendBroadcast()方法来发送指定的广播。
   
  -Android注册广播接收者的方式
   常驻型广播接收者
   在AndroidManifest.xml文件中注册的广播接收者，这种方式注册的广播接收者即使你的应用程序没有启动或者是被关闭了，这个BroadcastReceiver仍然能接收广播。
   非常驻型广播接收者
   在程序中通过代码注册，这种非常驻型广播接收者，如果应用程序没有启动或者是被关闭了，BroadcastReceiver将不能接收广播。
 
 -BroadcastReceiver的onReceiver()方法
  如果BroadcastReceiver的onReceiver()方法不能够在10秒内执行完成，Android系统就会认为系统无响应,所以不要在onReceiver()方法中执行耗时操作，
  如果我们确实需要在onReceiver方法中执行耗时操作，则可以考虑启动一个Service。
  我们可能会这样想，如果确实需要在onReceiver方法中执行耗时操作，能不能在onReceiver方法中创建一个子线程来执行耗时操作。答案是也不能够这样做，
  因为BroadcastReceiver的生命周期非常短，可能出现子线程还没有结束，BroadcastReceiver就已经退出了,如果BroadcastReceiver所在的进程结束了,虽然该进程内还有
  用户启动的子线程，但是由于该进程内不包含任何活动组件，因此系统在内存紧张时会优先结束该进程，这样就可能导致BroadcastReceiver启动的子线程不能执行完成。 
  所以也不应该在onReceiver方法中创建子线程来执行耗时操作。
  最好就是在onReceiver方法中启动Service。

    
  
   
     
  




	

 
 
 
  
 
 




 
   













	