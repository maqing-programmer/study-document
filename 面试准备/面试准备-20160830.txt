-加密算法

-了解nfc开发

-熟悉属性动画以及原理，了解View绘制机制和动作处理机制

-会对android各种不同版本相机及图片在未root的机器data/data/下的存取操作



5.Property Animation(属性动画)

  

  -属性动画简介

  前面我们已经学习过了Frame Animation(逐帧动画)和Tween Animation(补间动画),现在再来了解一下

  Android中另一个非常重要的动画-Porperty Animation(属性动画)。

  属性动画是Android 3.0开始，Android系统提供的一种全新的动画模式,功能非常强大，弥补了之前补间动画

  的缺陷，几乎可以完全取代补间动画，

  

  已经有了逐帧动画和补间动画，为什么还要引入属性动画？

  最重要的一个原因其实就是补间动画改变的只是View的显示效果，而不会真正改变View的属性，而属性动画改变的是View的属性。

  例如：我们利用补间动画将一个按钮从左上角移动到了右下角，但是点击这个按钮，并不会触发点击事件，因为实际上这个按钮还是

  停留在屏幕的左上角，只不过补间动画将这个按钮绘制到了屏幕的右下角而已。

  

  而属性动画就可以解决这个问题，属性动画的机制不在是针对于View来设计的，也不限定于透明度、缩放、位移和旋转这几种

  动画操作，不再是一种视觉上的动画效果，实际上是一种对View的属性值不断操作的机制，可以是对象的任意属性。

  

  使用属性动画只需要告诉系统，动画的时长，需要执行哪种动画，动画的初始值和结束值。

  对于前面的"按钮问题"，如果使用属性动画实现按钮的移动，移动后，按钮就是真正的移动了，点击事件就是有效的。

  

  -ValueAnimator

   ValueAnimator是整个属性动画机制中最核心的一个类，前面说过，属性动画的机制就是不断地对属性值进行操作来实现的，

   而初始值和结束值之间的动画过渡就是通过ValueAnimator来计算的,我们需要将动画的初始值和结束值提供给ValueAnimator,

   并且告诉它运行的时长，那么ValueAnimator就会自动的帮我们完成从初始值平滑的过渡到结束值这样的效果。除此之外ValueAnimator

   还负责管理动画的播放次数，播放模式，以及对动画设置监听器。

   

   ValueAnimator的使用并不复杂，比如说想要将一个值从0平滑的过渡到1，时长300毫秒，就可以这样写：

   ValueAnimator anim=ValueAnimator.ofFloat(0f,1f);

   anim.setDuration(300);

   anim.start();

   这里使用ValueAnimator的ofFloat()方法构建出了一个ValueAnimator实例，ofFloat()方法允许传入多个float类型的参数

   这里传入了两个参数，0,1，就表示将值平滑的从0过渡到1，然后通过setDuration()方法设置动画的时长，调用start()方法

   来启动动画。

   

   运行代码，动画就会执行，当然这只是一个将值从0过渡到1的动画，看不到任何界面效果，我们怎么知道动画是不是运行了，

   可以借助于监听器，

   ValueAnimator anim=ValueAnimator.ofFloat(0f,1f);

   anim.setDuration(300);

   anim.start();

   anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){

   public void onAnimatorUpdate(ValueAnimator animation){

   float currentValue=(float)animation.getAnimatorValue();

   Log.i(TAG,currentValue);

   }

   });

   根据打印信息，就可以知道动画运行了。

   

   当然，你也许不需要小数位数的动画过渡，只希望是一个整数值从0平滑的过渡到100，那么只需要调用ValueAnimator的ofInt()方法

   来构建ValueAnimator实例即可。还有ofObject()方法  

   可以调用 setStartDelay()方法来设置动画延迟播放的事件,

   可以调用setRepeatCount()方法和setRepeatMode()方法来设置动画循环播放的次数以及循环播放的模式，

   循环模式包括 RESTART和REVERSE两种，分别表示重新播放和倒序播放



-ObjectAnimator

 相对于ValueAnimator,ObjectAnimator可能才是我们最常使用到的类，因为ValueAnimator只是对值进行了一个平滑的过渡

 ，这种场景几乎不会使用，而ObjectAnimator就不同了，它可以对任意对象的任意属性进行动画操作，比如说View的alpha

 属性。

 ObjectAnimator是继承自ValueAnimator,底层的动画机制也是基于ValueAnimator来实现的。

 

 ObjectAnimator与ValueAnimator的用法是相类似的，如我们将一个TextView在5秒内从常规变成透明，再从透明变成常规。

 

 ObjectAnimator anim=ObjectAnimator.ofFloat(textview,"alpha",1f,0f,1f);

 anim.setDuration(5000);

 anim.start();

 

 再例如：将一个TextView旋转360度,

 

 ObjectAnimator anim=ObjectAnimator.ofFloat(textview,"rotation",0f,360f);

 anim.setDuration(5000);

 anim.start();

 

 再如：将TextView先向左移出屏幕外，然后再移回来。

 float currentTranslationX=textview.getTranslationX();

 ObjectAnmiator anim=ObjectAnimator.ofFloat(textview,"translationX",currentTranslationX,-500f,currentTranslationX);

 anim.setDuration(5000);

 anim.start();

 

 再如：将TextView在垂直方向上放大3倍，再还原。

 ObjectAnimation anim=ObjectAnimation.ofFloat(textview,"scaleY",1f,3f,1f);

 anim.setDuration(5000);

 anim.start();

 

 通过上面的例子，可以知道ObjectAnimation的使用还是非常简单的，举的例子中我们已近通过 alpha,rotation,translationX,scaleY这几个值

 完成了透明度，旋转，位移，垂直方向缩放这几种动画。

 那么还有哪些属性是可以使用的呢，主要是看这个对象中的的get和set方法，

 因为如果有getXXX()和setXXX()方法，就可以操作设个属性。

 

 TextView中是有 getAlpha()和setAlpha方法的，所以可以使用ObjectAnimation操作alpha: ObjectAnimator.ofFloat(textview,"rotation",0f,360f);

                getRotation和setRotation() 所以可以使用ObjectAnimation来操作rotation: ObjectAnimator.ofFloat(textview,"rotation",0f,360f);

				其它也是如此。

-组合动画

 独立的动画实现的效果是有限的，将多个动画组合到一起就是非常必要的了，属性动画有一个组合动画类:AnimatorSet。

 使用这个类可以实现动画的组合。

 AnimatorSet类有一个play()方法，向这个方法中传入一个Animator(ValueAnimator和ObjectAnimator)对象,将会返回一个AnimatorSet.Builder实例，

 Animator.Builder中有以下几个方法：

 after(Animator anim) 将现有动画插入到传入的动画之后执行

 after(long delay) 将现有动画延迟指定的毫秒后执行

 before(Animator anim)将现有动画插入到传入的动画之前执行

 with(Animator anim) 将现有动画和传入动画同时执行 

 

 有了这四个方法就可以实现组合动画了：

 

 例如:让TextView从屏幕外移动进屏幕，然后旋转360度，旋转的同时改变透明度。

 ObjectAnimator move=ObjectAnimator.ofFloat(textview,"translationX",-500f,0f);

 ObjectAnimator rotate=ObjectAnimator.ofFloat(textview,"rotation",0f,360f);

 ObjectAnimator alpha=ObjectAnimator.ofFloat(textview,"alpha",1f,0f,1f);

 

 AnimatorSet animSet=new AnimatorSet();

 animSet.play(rotate).with(alpha).after(move);

 anim.setDuration(5000);

 animSet.start();

 

-属性动画监听器

 在实际开发中，我们可能需要监听动画的各种事件，比如动画何时开始，何时结束，在里面需要执行一些操作，

 Animator类提供了addListener()方法，这个方法接收一个AnimatorListener。我们只需要实现这个AnimatorListener

 就可以监听动画的各种事件了。

 ObjectAnimation是继承自ValueAnimator,而ValueAnimator是继承自Animator的，所以ObjectAnimator和ValueAnimator

 也可以使用addListener方法来添加监听器:

 anim.addListener(new AnimatorListener(){

 

	public void onAnimationStart(Animator animtion){

	

	}

	public void onAnimationRepeat(Animator animation){

	}

	public void onAnimationEnd(Animator animation){

	

	}

	public void onAnimationCancel(Animator animation){

 

	} 

  });

  

  AnimatorListener接口里里有四个方法：

  onAnimationStart()方法在动画开始时调用

  onAnimationRepeat()方法在动画重复执行时调用

  onAnimationEnd()方法在动画结束时调用

  onAnimationCancel()方法在动画被取消时调用

  

  如果我们不想要监听这么多事件，可以不使用AnimatorListener接口，使用这个接口每次都要实现

  四个方法，比较繁琐。为此Android提供了一个适配器类，AnimatorListenerAdapter,可以将这个类

  传入 addListener()中，这样只需要实现想要监听的事件方法即可。

  

  anim.addListener(new AnimatorListenerAdapter() {  

    @Override  

    public void onAnimationEnd(Animator animation) {  

    }  

});  

 

-使用XML定义属性动画

 在学习逐帧动画和补间动画的时候，既可以在代码中定义动画，也可以在XML中定义动画，

 属性动画也同样可以使用XML定义：

 

 在res中新建一个animtor目录,在animator创建的救是属性动画资源文件

 在XML中可以使用以下三种标签：

 <animtor> 对应代码中的ValueAnimator

 <objectAnimator> 对应代码中的ObjectAnimator

 <set> 对应代码中 AnimatorSet

 

 例子：定义一个将值从0平滑的过渡到100的动画

 <animator

 android:valueFrom="0"

 android:valueTo="100"

 android:valueType="intType"

 />

 

 例子：将一个视图的alpha属性从0变到1

 <objectAnimator

 android:valueFrom="1"

 android:valueTo="0"

 android:valueType="floatType"

 android:propertyName="alpha"

 >

 

 例子：使用XML定义组合属性动画:将视图从屏幕外移入屏幕内，然后旋转360度，旋转的同时改变透明度

       透明度从1到0，再到1

	<set>

	   <objectAnimator

	    android:valueFrom="-500"

		android:valueTo="0"

		android:valueType="floatType"

		android:propertyName="translationX"  

	    />

	  <set

		android:ordering="together"

		>

		<objectAnimator

		android:propertyName="rotation"

		android:valueFrom="0"

		android:valueTo="360"

		android:valueType="floatType"

		/>

			

          <set

			android:ordering="sequentially"

				>

	   

				<objectAnimator

					android:valueFrom="1"

					android:valueTo="0"

					android:propertyName="alpha"

					android:valueType="floatType"

					/>

				<objectAnimator

					android:valueFrom="0"

					android:valueTo="1"

					android:propertyName="alpha"

					android:valueType="floatType"

					/>

			</set>

	   

	    </set>

	</set>

	   

 使用XML定义的属性动画

 Animator anim=AnimatorInflater.loadAnimator(context,R.animator.my_anim);

 animtor.setTarget(view);

 animator.start();

 

调用AnimatorInflater的loadAnimator来将XML动画文件加载进来，然后再调用setTarget()方法将这个动画设置到某一个对象上面，最后再调用start()方法启动动画就可以了，就是这么简单。



-属性动画的高级用法。



 以上只是属性动画的基本用法,下面来学习一下属性动画的高级用法

 前面我们就说过，补间动画只能够对View对象进行操作,而属性动画就不受这个限制，它可以对任何对象进行动画操作。

 比如：自定义的View中有一个Ponit对象用于管理坐标，在onDraw()方法中就是根据这个Point对象的坐标值来进行绘制的，

 如果我们对Point对象进行动画操作，那么整个自定义View动画效果就有了。下面就来实现下这样的效果。

 

 但是在实现这样的效果之前，先来掌握一个知识点，就是TypeEvaluator。

 TypeEvaluator是用来告诉动画系统如何从初始值过渡到结束值的，上面介绍的 ValueAnimator.ofFloat()方法实现的

 是初始值和结束值之间的平滑过渡，这个平滑过渡就是系统内置了一个FloatEvaluator,它通过计算告知动画系统如何

 从初始值过渡到结束值，FloatEvaluator的源码如下:

 public class FloatEvaluator implements TypeEvaluator {  

    public Object evaluate(float fraction, Object startValue, Object endValue) {  

        float startFloat = ((Number) startValue).floatValue();  

        return startFloat + fraction * (((Number) endValue).floatValue() - startFloat);  

    }  

}  



FloatEvaluator实现了TypeEvaluator接口，重写了evaluate()方法，evaluate()方法中传入了三个参数，

第一个参数 fraction非常重要，这个参数用于表示动画的完成度的，我们根据它拉计算当前动画的值应该是多少，

第二个和第三个参数分别代表动画的初始值和结束值。

上面FloatEvaluator的逻辑非常清楚，就是用结束值减去初始值，算出差值，然后乘以fraction这个系数，再加上初始值

就得到了当前动画的值。

FloatEvaluator是系统内置好的，不需要我们编写，前面介绍的ValueAnimator的ofFloat()和ofInt()方法，分别用于对浮点数和

整数进行操作的，但是ValueAnimator还有一个ofObject()方法，用于对任意对象进行动画操作，相对于浮点型和整型数据，对象的

动画操作要复杂一些，因为系统无法知道如何从初始化对象过渡到结束对象，这个时候，就需要我们自己定义一个TypeEvaluator来

告知系统是如何进行过渡的。



下面定义一个Point类：

public class Point {  

  

    private float x;  

  

    private float y;  

  

    public Point(float x, float y) {  

        this.x = x;  

        this.y = y;  

    }  

  

    public float getX() {  

        return x;  

    }  

  

    public float getY() {  

        return y;  

    }  

  

}

Point类就是用于记录坐标位置的。

下面来定义PointEvaluator

public class PointEvaluator implements TypeEvaluator{



public Object evaluate(float fraction,Object startValue,Object endValue){

Point startPoint=(Point)startValue;

Point endPoint=(Point)endValue;

float x=startPoint.getX()+fraction*(endPoint.getX()-startPoint.getX());

float y=startPoint.getY()+fraction*(endPoint.getY()-startPoint.getY());

Point point=new Point(x,y);

return point;

  }

}

这样就定义了一个TypeEvaluator，用于告诉系统如何从point1平滑的过渡到point2了。



Point point1=new Point(0,0);



Point point2=new Point(300,300);

ValueAnimator anim=ValueAnimator.ofObject(new PointEvaluator(),point1,point2);





这就是自定义TypeEvaluator,下面来对Point对象进行动画操作，来实现整个自定义View的动画效果。

public class MyAnimView extends View {  

  

    public static final float RADIUS = 50f;  

  

    private Point currentPoint;  

  

    private Paint mPaint;  

  

    public MyAnimView(Context context, AttributeSet attrs) {  

        super(context, attrs);  

        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);  

        mPaint.setColor(Color.BLUE);  

    }  

  

    @Override  

    protected void onDraw(Canvas canvas) {  

        if (currentPoint == null) {  

            currentPoint = new Point(RADIUS, RADIUS);  

            drawCircle(canvas);  

            startAnimation();  

        } else {  

            drawCircle(canvas);  

        }  

    }  

  

    private void drawCircle(Canvas canvas) {  

        float x = currentPoint.getX();  

        float y = currentPoint.getY();  

        canvas.drawCircle(x, y, RADIUS, mPaint);  

    }  

  

    private void startAnimation() {  

        Point startPoint = new Point(RADIUS, RADIUS);  

        Point endPoint = new Point(getWidth() - RADIUS, getHeight() - RADIUS);  

        ValueAnimator anim = ValueAnimator.ofObject(new PointEvaluator(), startPoint, endPoint);  

        anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {  

            @Override  

            public void onAnimationUpdate(ValueAnimator animation) {  

                currentPoint = (Point) animation.getAnimatedValue();  

                invalidate();  

            }  

        });  
        anim.setDuration(5000);  
        anim.start();  
    }  
} 

-属性动画的Interpolator
 在补间动画中我们已经使用过Interpolator,Interpolator是插值器的意思，是用来控制动画的变化速度的。
 Android系统内置了以下几个插值器：
 LinearInterpolator 控制动画匀速变化
 AccelerateInterpolator 控制动画加速变化
 DecelerateInterpolator 控制动画减速变化
 AccelerateDecelerateInterpolator 控制动画先加速变化，后减速变化

 在属性动画中也是可以设置Interpolator的，通过Animator的setInterpolator()方法即可。
 参数就可以使用上面的集中Interpolator。


 步骤：配置showShare()方法





 

 

 

 

 

 

 

 

 

  

 

 

  

  



  

  

  

  

  