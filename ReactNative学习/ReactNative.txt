1.ReactNative

  -React Native 是一个使用React和应用平台的原生功能来构建 Android 和 iOS 应用的开源框架。通过 

  React Native，您可以使用 JavaScript 来访问移动平台的 API，以及使用 React 组件来描述 UI 

  的外观和行为：一系列可重用、可嵌套的代码。

  -React Native应用是真正的移动应用

   React Native产出的并不是“网页应用”， 或者说“HTML5应用”，又或者“混合应用”。 

   最终产品是一个真正的移动应用，从使用感受上和用Objective-C或Java编写的应用相比几乎是无法区分的。 

   React Native所使用的基础UI组件和原生应用完全一致。 

   你要做的就是把这些基础组件使用JavaScript和React的方式组合起来

2.核心组件和原生组件

  -视图(View)与移动开发

   在Android和iOS开发中,一个View是UI的基本组成部分：应用程序中的文本、按钮、图片等等都是一个View

 -原生组件
         
  在Android开发中是使用Kotlin或者Java来编写视图，在iOS中是使用Swift或者Object-C来编写视图；

  在ReactNative中，则是使用React组件通过JavaScript来调用这些视图。

  在运行时，ReactNative为这些组件创建相应的Android和iOS视图，由于ReactNative组件就是对原生的视图

  的封装，因此使用ReactNative编写的应用外观、感觉和性能与任何原生应用一样，我们将这些平台支持的组件

  成为原生应用。


-核心组件  

  ReactNative还包括一些基本的，随时可用的原生组件，被称之为核心组件,

  可以在https://reactnative.cn/docs/components-and-apis 这个API

  文档查看所有核心组件

  主要有以下核心组件:

  ReactNative UI Component    Android View    iOS View 

  <View>                      <ViewGroup>     <UIView>

  <Text>                      <TextView>      <UITextView>

  <Image>                     <ImageView>     <UIImageView>

  <ScrollView>                <ScrollView>    <UIScrolView>
  
  <TextInput>                 <EditText>      <UITextField>

3.React基础

  -由于ReactNative使用与 React 组件相同的 API 结构，因此需要了解 React 组件 API 才能上手

  ReactNative的基础是React,React是Web端非常流行的开源UI框架，要想掌握ReactNative,先了解

  React框架本身是非常有帮助的,下面我们来学习一些React的入门知识;

  -React的几个核心概念

   components 组件

   JSX

   props 属性

   state 状态

 -JSX
  
  JSX不是一门语言，而是一种语法，允许在JavaScript中写Html代码

4.Reaact Native

  -React Native项目的目录解析

  -android/ios 目录

   这两个目录就是android和ios的原生项目目录

  -index.js
   
   这个是React Native 项目的入口文件

  -App.js
  
   我们在这个JS中定义了一个组件 Test1

   import React from 'react';
   import {
    View,
    Text,
    StyleSheet
   } from 'react-native';

const Test1 =() =>{
    return (
     <>
      <View style={styles.view}>
        <Text>测试</Text>
        <Text>Android</Text>
      </View>
     </>
    );
};

const styles=StyleSheet.create({
    view:{
        width:200,
        height:200,
        backgroundColor:'rgb(255,0,0)'
    }
});

export default Test1;

然后在index.js中使用这个定义的组件 

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';
import Test1 from './Test1';
AppRegistry.registerComponent(appName, () => Test1) 

-样式

(1)上面我们在App.js中定义一个了一个组件Test1其中为<View>设置了一个

样式，而样式是通过StyleSheet定义了一个样式对象，然后在<View>中

引用样式

 <View style={styles.view}> 
  ...
 </View>

(2)除了通过StyleSheet定义样式对象，还可以直接在View中使用{ } 来使用样式

   <View style={ {  width:200,height:200,backgroundColor:'rgb(255,0,0)' } }> 
    ...
   </View>

(3)可以同时设置多个样式对象

    不同样式属性合并，相同样式属性右边样式的优先级高
   
   <View style={ [style.view1,style.view2]  }> 

   </View>


   const styles =StyleSheet.create(
     {
       view1{
         width: 200,
         height:200,
         backgroundColor:'red'
       }
       ,
       view2{
         backgroundColor:'yellow'
       }
     }
   );

-FlexBox布局
 
 在React Native中使用flexBox规则来制定某个组件的子元素的布局,类似于Android中的

 LinearLayout的一种布局，但是要比LinearLayout强大的多;

 -FlexBox基本概念

  采用Flex布局的元素,称为Flex容器,它的所有子元素自动成为容器成员; 

  容器默认存在两根轴:主轴(main axis),和交叉轴(cross axis),主轴的开始位置

  称之为main start,结束位置叫做main end;交叉轴的开始位置叫做cross start,

  结束位置叫做cross end;

  主轴默认是竖直方向的，而子元素是沿着主轴方向排列的;每个子元素在主轴方向占用的空间称之为

  main size,占据的交叉轴的空间叫做cross size;

-FlexBox的属性

 下面我们来学习一下FlexBox的一些属性设置

 (1) flexDirection

     这个属性是用来决定主轴的方向，也就是子元素的排列方向

     row:水平方向是主轴方向，起点在左端 （也就是子元素是从左至右排列）

     row-reverse :  水平方向是主轴方向，起点在右端 （也就是子元素是从右至左排列）

     column(默认值) : 垂直方向是主轴方向，，起点在上端 （也就是子元素是从上至下排列）

     column-reverse: 垂直方向是主轴方向,起点在下端  （也就是子元素是从下至上排列）

(2) flexWrap

    这个属性是用来设置如果一条轴线排不下，如何换行;

    默认情况下，子元素都排在一条轴线上，不换行，超过轴线不显示

    nowrap : 不换行,超过轴线不显示

    wrap : 换行，第一行在上方

    wrap-reverse : 换行，第一行在下方

(3)flexFlow

   flexFlow属性是flexDirection属性和flexWrap属性的简写形式,默认值为row|nowrap

   参照flexDirection和flexWrap结合即可

(4)justifyContent

   这个属性定义子元素在主轴上的对齐方式;

   flex-start (默认值) 左对齐

   flex-end :右对齐

   center :居中 

   space-between: 两端对齐，项目之间间隔相等

   space-evenly:均匀排列每个元素，每个元素之间间隔相等

   space-around:每个子元素两侧间隔相等,所以子元素之间的间隔要比子元素

                距离两边的间隔大一倍；
    
(5)alignItems

   这个属性定义子元素在交叉轴(cross axis)上如何对齐;

   stretch : (默认值) 如果子元素未设置高度或者设置为auto,将占满整个容器的高度
   
   flex-start: 交叉轴的起点对齐

   flex-end : 交叉轴的终点对齐

   center : 交叉轴的中点对齐

   baseline : 子元素的第一行文字的基线对齐 

(6)alignContent

   前面我们学习了flexWrap属性,用来设置在一条轴线上排列不下时，是否换行，

   而alignContent属性则设置在换行时，交叉轴上的排列方式 

   stretch : (默认值) 轴线占满整个交叉轴

   flex-start : 与交叉轴的起点对齐

   felx-end : 与交叉轴的终点对齐

   center : 与交叉轴的中点对齐

   space-between : 与交叉轴两端对齐，轴线之间的间隔均匀分布

   space-around : 每根轴线两侧的间隔相等，所以轴线之间的间隔比

                  轴线和边距的间隔大一倍

(7) flexGrow

    定义子元素的占有剩余空间的比例;

    默认是0，即如果存在剩余空间，也不放大;

    如果有三个子元素，flexGrow分别为1,1,1;则内容包裹占用空间之后，剩余空间按照1:1:1平分;

    如果有三个子元素，flexGrow分别为1,2,1,则内容包裹占用空间之后，剩余空间按照1:2:1平分;

(8) alignSelf

    这个属性允许单个子元素与其他子元素有不一样的对齐方式，可覆盖alignItems属性，如果没有父元素

    等同于stretch

    auto : (默认值) 表示继承父元素的alignItems属性

    flex-start : 交叉轴的起点对齐

    flex-end : 交叉轴的终点对齐

    center : 交叉轴的中点对齐

    baseline : 项目的第一行文字的基线对齐

    stretch : 如果项目未设置高度或者设置为auto,将占满整个容器的高度

-Text组件

 Text组件是用来显示文本的，支持嵌套、样式；

  (1)嵌套文本

  在iOS和Android中显示格式化文本的方法类似，都是提供你想显示的文本内容，然后使用范围

  标注来制定一些格式(在iOS中使用NSAttributedString,在Android上则是SpannableString)

  这种用法非常繁琐。在ReactNative中,采用的是和Web一致的设计，可以把相同格式的文本嵌套包裹起来;
    <View style={{backgroundColor:'red',flexGrow:1,
        justifyContent:'center',
            alignItems:'center'
        }}>
            <Text style={{fontSize:30}}>
            Hello World
            <Text style={{fontSize:20,color:'blue'}}> I Like React Native</Text>
            </Text>
    </View>

（2）样式继承限制
 
 在Web上，要想指定整个文档的字体和大小，只需要这样写：
 
 /* 这段代码是CSS, *不是*React Native */
 html{
  font-family: 'lucida grande', tahoma, verdana, arial, sans-serif;
  font-size: 11px;
  color: #141823;
 } 
 
当浏览器尝试渲染一个文本节点时,它会在树中一路向上查询，直到根节点，来找一个具备font-size

属性的元素,这个系统一个不好的地方在于任何节点都可能会有font-size属性，包括<div>标签。这个

设计为了方便而设计，但实际上语义上并不太正确。

在React Native中，文本必须放在<Text>组件内，不能直接在<View>下放置一段文本;

(3)属性

   <Text>组件的一些属性

   -selectable 决定用户是否可以长按选择文本,以便复制和粘贴

    bool类型

   -numberOfLines
   
    文本所能显示的最大行数,至于超过最大行数部分如何显示，取决于elipsizeMode

   -elipsizeMode
    
    就是设置numberOfLines的最大行数后，文本过长时，numbserOfLines设置的行数显示不下时，

    该如何显示文本

    head ：从文本内容头部截取显示省略号 如："...efg"

    middle : 从文本内容中间截取显示省略号。如：'ab...yz'

    tail : 从文本内容尾部截取显示省略号。 如： 'abc...'

    clip : 不显示省略号，直接从尾部截断

    -onLayout

     值是一个函数，在加载时或者布局变化以后调用设置的函数

     可以在此时获取该元素的位置,大小

    -onLongPress
    
     值是一个函数，当文本被长按以后调用此回调函数

    -onPress
    
     值是一个函数，当文本被点击以后调用此回调函数

    -style

     <Text>除了继承<View>组件的所有Style 属性外，本身还有如下属性
               
  color：字体颜色 

  fontFamily：字体名称

  fontStlye：字体风格(normal,italic)

  fontWeight：字体粗细('normal','bold','100','200')

  fontSize：字体大小

  textShadowOffset：设置阴影效果{width:number,height:number}

  textShaowRadius：阴影效果圆角

  textShadowColr：阴影效果的颜色

  letterSpacing：字符间距

  lineHeight：行高

  textAlign：文本对齐方式('auto', 'left', 'right', 'center', 'justify')

  textDecorationLine：横线位置('none','underline','line-through','underline line-through')

  textDecorationStyle：线的风格('solid','')

  textDecorationColor：线的颜色

  writingDirection：文本方向('auto','ltr','rtl')
  
-组件的属性pros

import React ,{Component} from 'react'
import {
    View,
    Text
} from 'react-native'

class MyComponentB extends Component{

 constructor(props) {
     super(props);
     this.state={
         name:props.name,
     }
 }

 render() {
     return (
         <View >
            <Text style={{fontSize:20}}>{this.state.name}</Text>
         </View>
     )
 }
}

export  default  class MyComponentC extends Component{
      render() {
          return (
              <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>
                  <MyComponentB name={'李四'}/>
              </View>
          );
      }
}

-组件的转态state 

import React ,{Component} from 'react';
import {
    View,
    Text
} from 'react-native'

export default class MyComponent extends Component{

    state ={
        name:'张三',
        age:'20'
    }

    setName =() => {
        const name= this.state.name =='张三' ? '李四':'张三'
        const age=this.age
        console.log('-----setName---:'+name)
        this.setState({name,age})
    }

render() {
    return(
        <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>
        <Text style={{fontSize:20}} onPress={this.setName}> {this.state.name} </Text>
        </View>
    )
 }
}

-TextInput组件

 输入组件TextInput;

 常见的属性:

   style	style	用于定制组件的样式

   underlineColorAndroid	color	Android 中下划线的颜色，透明则为 transparent

   placeholder	string	占位符

   placeholderTextColor	color	占位符的颜色

   multiline	bool	是否多行，默认为单行

   numberOfLines	number	设置了 multiline 后要设置的行数

   editable	bool	是否可编辑

   keyboardType	string	键盘类型，可选的值有 “default”,”number-pad”,”decimal-pad”,   

   “numeric”,”email-address”,”phone-pad”

   secureTextEntry	bool	是否属于密码框类型

   returnKeyType	string	键盘上的返回键类型，可选的值有 “done”,”go”,”next”,”search”,”send”

   autoCapitalize	string	字母大写模式，可选的值有:’none’, ‘sentences’, ‘words’,  

   ‘characters’

   onChangeText	function  文本变更后的回调函数，参数为输入框里的文本 
   
-Image组件

 iOS中使用UIImage来显示图片，Andorid中使用ImageView来显示图片;

 React Native中对UIImage和ImageView进行封装，提供Image组件来显示图片;

 Image组件可以显示网络图片，本地图片，以'data:'开头的base64图片数据

 请注意对于网络和 base64 数据的图片需要手动指定尺寸！

 -属性

  (1)source

  图片数据源,远程URL或者本地地址或者base64 

  (3)defaultSource

  在读取图片时默认显示的图片

  类型	              必填	平台
 
  object, number	   否	iOS
 
  number	           否	Android  实测：Android 平台无效


  If passing an object, the general shape is {uri: string, width: number, height: number, 

  scale: number}:

  uri - 是一个表示图片的资源标识的字符串，它可以是一个本地文件路径或是一个静态资源引用（使用require(

  相对路径)来引用）。

  width, height - 如果你知道图片的尺寸，那么可以在这里指定。这一尺寸会被用作<Image/>组件的默认尺寸。

  scale - 图片的缩放系数。默认是 1.0，意味着每一个图片像素都对应一个设备独立像素（DIP）。

  number - 静态图片引用语法require('./image.jpg')所返回的资源 id。

  注意： 在 Android 的 debug 版本上本属性不会生效（但在 release 版本中会生效）。

  (4)onLoadStart

  值是一个函数

  加载开始时回调

  (5)onLoad

     值是一个函数

     加载成功完成时调用此函数

  (6)onLoadEnd
  
     值是一个函数

     加载结束后，不论成功还是失败，调用此回调函数

   (7)onLoadEnd

      值是一个函数

      当加载错误的时候调用此回调函数
   
   (8)onProgress 只有iOS平台有

      在加载过程中不断调用，参数为{nativeEvent:{loaded,total} } 

   (9)style

      样式属性

      Image 组件有很多属性，但常用的且跨平台的属性真心不多，我们列举几个常用的介绍下。

      除了一些常见的属性，Image有一些特有属性

      borderTopRightRadius | number | 设置右上角的圆角度数，默认值为 0 |
      
      borderBottomLeftRadius | number | 设置左下角的圆角度数，默认值为 0 |
      
      borderBottomRightRadius | number | 设置右下角的圆角度数，默认值为 0 |
      
      boderTopLeftRadius | number | 设置左上角的圆角度数，默认值为 0 |
      
      borderRadius | number | 统一设置四个角的圆角度数，默认值为 0 |
      
      borderColor | color | 设置边框    的颜色 |
      
      borderWidth | number | 设置边框的宽度，默认值    为 0 |
      
      backgroundColor | color | 设置图片组件的    背景色 |
      
      opacity | number | 设置图片组件的        透明度 |
      
      overflow | string | 当组件超出屏幕宽高时是    否可见， ‘visible’ 显示, ‘hidden’     隐藏 |
      
      backfaceVisibility | string | 定义当    组件不面向屏幕时是否可见， ‘visible’ 显示, ‘hidden’     隐藏 |
      
      tintColor | color | 将所有非透    明的图片像素改为    此颜色 |
      
      resizeMode | string | 设置图片如何适应    图片容器，可选的值有： 'cover', 'contain', 'stretch', 'repeat', 'center'       
    
      resizeMode详解：

      决定当组件尺寸和图片尺寸不成比例的时候如何调整图片的大小。默认值为cover。    

      cover: 在保持图片宽高比的前提下缩放图片，直到宽度和高度都大于等于容器视图的尺寸（如果容器有     

      padding 内衬的话，则相应减去）。译注：这样图片完全覆盖甚至超出容器，容器中不留任何空白。    

      contain: 在保持图片宽高比的前提下缩放图片，直到宽度和高度都小于等于容器视图的尺寸（如果容器有     

      padding 内衬的话，则相应减去）。译注：这样图片完全被包裹在容器中，容器中可能留有空白。    

      stretch: 拉伸图片且不维持宽高比，直到宽高都刚好填满容器。    

      repeat: 重复平铺图片直到填满容器。图片会维持原始尺寸，但是当尺寸超过容器时会在保持宽高比的前提下缩    

      放到能被容器包裹。    

      center: 居中不拉伸。

-Image使用注意点

在 Android 上支持 GIF 和 WebP 格式图片

默认情况下 Android 是不支持 GIF 和 WebP 格式的。你需要在android/app/

build.gradle文件中根据需要手动添加以下模块：

dependencies {

  //如果你需要支持Android4.0(API level 14)之前的版本
  implementation 'com.facebook.fresco:animated-base-support:1.3.0'

  //如果你需要支持GIF动图
  implementation 'com.facebook.fresco:animated-gif:2.0.0'

  // 如果你需要支持WebP格式，包括WebP动图
  implementation 'com.facebook.fresco:animated-webp:2.1.0'
  implementation 'com.facebook.fresco:webpsupport:2.0.0'

  // 如果只需要支持WebP格式而不需要动图
  implementation 'com.facebook.fresco:webpsupport:2.0.0'

}

-ActivityIndicator组件
 
 ActivityIndicator实际上就是Android中的加载中进度条

 -属性

 (1)animating 

    bool 值

    是否要显示指示器动画,默认为true,false则隐藏

 (2)color

 滚轮的前景颜色 (iOS 上默认为灰色，安卓上默认为深绿色）

 (3)size

    进度条的大小 默认为'small' 目前只能在 Android 上设定具体的数值

    'small' 

    'large'

-Button 组件
 
 一个简单的跨平台的按钮组件。可以进行一些简单的定制

 这个组件的样式是固定的,所以如果它的外观并不怎么搭配你的设计，那你需要使用TouchableOpacity或是
 
 TouchableNativeFeedback组件来定制自己所需要的按钮

 -属性

 (1) onPress

 用户点击按钮时所调用的处理函数

 (2)title

 按钮显示的文本

 (3)disabled

    值为true时，此按钮将不可点击
 
-TouchableOpacity 组件
 
 前面我们说了Button组件可用于响应点击事件的组件，但是样式定制比较受限，

 TouchableOpacity用于封装视图,可以用于响应点击事件，可以定制样式，

 定制样式就通过style样式设置即可;

-TouchableHiglight组件
 
 TouchableHighlight和TouchableOpacity组件一样用于封装视图，响应点击事件，

 定制样式，与TouchableOpacity不同的是，TouchableHiglight可以设置触摸时变色

 放开后变回原色

 可通过属性underlayColor设置触摸时的颜色,实现触摸时的反馈效果

-AsyncStorage 组件

 AsyncStorage 是一个简单的、异步的、持久化的key-value存储系统,它对于APP来说是全局性的;

 推荐在AsyncStorage的基础上做一层抽象封装，而不是直接使用AsyncStorage

 在 iOS 上，AsyncStorage在原生端的实现是把较小值存放在序列化的字典中，而把较大值写入单独的文件。在 

 Android 上，AsyncStorage会尝试使用RocksDB，或退而选择 SQLite。

 -方法

-setItem()

static setItem(key: string, value: string, [callback]: ?(error: ?Error) => void)

将key字段的值设置成value(注意 value 必须是字符串值，非字符串数据必须先序列化为字符串)，并在完成后调

用callback函数。如果有任何错误发生，则会传递一个Error对象作为第一个参数。返回一个Promise对象。

-getItem()
  
 static getItem(key: string, [callback]: ?(error: ?Error, result: ?string) => void)

 读取key字段并将结果作为第二个参数传递给callback。如果有任何错误发生，则会传递一个Error对象作为第一

 个参数。返回一个Promise对象。 

-removeItem()

 static removeItem(key: string, [callback]: ?(error: ?Error) => void)

 删除一个字段。返回一个Promise对象。 

-clear()

 static clear([callback]: ?(error: ?Error) => void)
 
 清空全部的AsyncStorage数据，不论来自什么库或调用者。通常不应该调用这个函数——使用removeItem或者mult

 iRemove来清除你自己的 key。返回一个Promise对象。

-getAllKeys()

 static getAllKeys([callback]: ?(error: ?Error, keys: ?Array<string>) => void)
 
 获取所有本应用可以访问到的数据，不论来自什么库或调用者。返回一个Promise对象。

-multiGet()

 static multiGet(keys: Array<string>, [callback]: ?(errors: ?Array<Error>, result: ?Array<

 Array<string>>) => void) 

 获取 keys 所包含的所有字段的值，其回调函数会传入一个 key-value 数组形式的数组

-multiSet()

 static multiSet(keyValuePairs: Array<Array<string>>, [callback]: ?(errors: ?Array<Error>) 

 => void)

 将多个键值对存储到系统中

-multiRemove()	
 
 static multiRemove(keys: Array<string>, [callback]: ?(errors: ?Array<Error>) => void)

 根据多个 key 删除多个键值对 
 
-动画组件

 React Native中动画实现的方式有三种:

 (1)requestAnimationFrame 

    称为帧动画，原理是通过同步浏览器的刷新频率不断重新渲染界面实现动画效果，网页

    H5动画基本都由这种实现。帧动画最初是Flash用于实现网页动画和游戏。由于性能消耗较大

    ，故一般不会用于APP的动画实现。

  (2)LayoutAnimation组件

     布局动画

  (3)Animated组件
  
    用于实现精细动画效果。需要配合动画化组件使用;

    Animated封装了四个可以动画化的组件：Animated.Image，Animated.ScrollView，Animated.Text 和 

    Animated.View，这表示使用Animated实现动画时由这些组件来完成动画渲染。  

    Animated实现动画有三步:(以透明度渐变为实例)

    -定义一个动画变量; 在组件中定义一个状态值this.state.fadeInOpacity,与动画绑定

    -渲染一个动画组件；如Animated.View,把第一步定义的this.state.fadeInOpcaity作为该组件

    透明度opacity样式的赋值

    -触发一个动画函数；如Animated.timing(...).start()

-StatusBar

 控制应用状态栏的组件

 在 React Native 中我们可以定制 状态栏 StatusBar 。当然了，说是定制，无非以下几点

 显示或隐藏状态栏。
 
 设置主题色：亮色系还是暗色系。

 设置显示或隐藏时是否启用动画。

 -属性

  (1)barStyle

  状态栏的主题： "dark-content|light-content" 
  
  (2)hidden

  是否隐藏状态栏

  (3)translucent

  指定状态栏是否透明。设置为 true 时，应用会延伸到状态栏之下绘制（即所谓“沉浸式”——被状态栏遮住一部分

  ）。常和带有半透明背景色的状态栏搭配使用。

  (4)animated

  指定状态栏的变化是否应以动画形式呈现。目前支持这几种样式：backgroundColor, barStyle 和 hidden。

-ScrollView 组件

 ScrollView的包裹的组件一屏幕显示不下时，可以滚动查看

 -属性

 (1)keyboardDismissMode

    用户拖拽滚动视图的时候，是否要隐藏软键盘。 

    'none' （默认值），拖拽时不隐藏软键盘。
    
    'on-drag'，当拖拽开始的时候隐藏软键盘。

 (2) keyboardShouldPersistTaps
     
     如果当前界面有软键盘，那么点击 scrollview 

     后是否收起键盘，取决于本属性的设置。（译注：很多人反应 TextInput 无法自动失去焦点/

     需要点击多次切换到其他组件等等问题，其关键都是需要将 TextInput 放到 ScrollView 

     中再设置本属性）

     'never' （默认值），点击 TextInput 

     以外的子组件会使当前的软键盘收起。此时子元素不会收到点击事件。

     'always'，键盘不会自动收起，ScrollView 也不会捕捉点击事件，但子组件可以捕获。

     'handled'，当点击事件被子组件捕获时，键盘不会自动收起。这样切换 TextInput 

     时键盘可以保持状态。多数带有 TextInput 的情况下你应该选择此项。

 (3)onContentSizeChange

    此函数会在 ScrollView 内部可滚动内容的视图发生变化时调用。

    调用参数为内容视图的宽和高: (contentWidth, contentHeight)。

  (4)onMomentumScrollBegin   

     滚动动画开始时调用此函数
   
  (5)onMomentumScrollEnd  

     滚动动画结束时调用此函数

  (6)onScroll

     在滚动的过程中，每帧最多调用一次此回调函数。调用的频率可以用scrollEventThrottle属性来控制。The

     event has the following shape (all values are numbers):

  (7)onScrollBeginDrag
     
     当用户开始拖动此视图时调用此函数。

  (6)onScrollEndDrag   

     当用户停止拖动此视图时调用此函数。

  (7)refreshControl

     指定RefreshControl组件，用于为 ScrollView 

     提供下拉刷新功能。只能用于垂直视图，即horizontal不能为true。

  (8)scrollEnabled      

     当值为 false 的时候，内容不能滚动，默认值为 true。

     注意即便禁止用户滚动，你也仍然可以调用scrollTo来滚动。

  (9)showsVerticalScrollIndicator   

     当此属性为 true 的时候，显示一个垂直方向的滚动条

  (10)stickyHeaderIndices 

   一个子视图下标的数组，用于决定哪些成员会在滚动之后固定在屏幕顶端。举个例子，传递stickyHeaderIndi

   ces={[0]}会让第一个成员固定在滚动视图顶端。这个属性不能和horizontal={true}一起使用。

   (11)horizontal
    
    当此属性为 true 

    的时候，所有的子视图会在水平方向上排成一行，而不是默认的在垂直方向上排成一列。默认值为 false。

  -方法

   (1)scrollTo() 

      scrollTo(

         ([y]: number),

        object,

        ([x]: number),

        ([animated]: boolean),

        ([duration]: number)
      );

  滚动到指定的 x, y 偏移处。第三个参数为是否启用平滑滚动动画。还有一个 duration 参数则是仅限 

  android 可以使用的滚动持续时间。
 
  示例：

  scrollTo({x: 0, y: 0, animated: true})

  指定滚动持续时间的示例(仅限 Android):

  scrollTo({x: 0, y: 0, duration: 500})

 (2)scrollToEnd() 

    scrollToEnd(([options]: { animated: boolean, duration: number }));

    滚动到视图底部（水平方向的视图则滚动到最右边）。

    加上动画参数scrollToEnd({animated: 

    true})则启用平滑滚动动画，或是调用scrollToEnd({animated: false})来立即跳转。For Android, 

    you may specify a duration, e.g. scrollToEnd({duration: 500}) for a controlled 

    duration scroll。如果不使用参数，则animated选项默认启用。
 
  (3)flashScrollIndicators()

     短暂地显示滚动指示器。

-FlatList组件

 高性能的简单列表组件,支持下面这些常用功能;

 完全跨平台。

 支持水平布局模式。

 行组件显示或隐藏时可配置回调事件。
 
 支持单独的头部组件。
 
 支持单独的尾部组件。
 
 支持自定义行间分隔线。
 
 支持下拉刷新。
 
 支持上拉加载。
 
 支持跳转到指定行（ScrollToIndex）。
 
 支持多列布局。

 如果需要分组/类/区（section），请使用<SectionList>.

 -SectionList组件

 -React Navigation 组件

  使用React Navigation组件可以实现多个页面跳转


   
  


























 










    


 
















 

  


     
























 








                    















  
    


    
























  


