1.C++简介
C++是面向对象的，全面兼容C语言(C语言中的内容完全可以在C++中使用)，可以认为C++是一门更好的C语言。

C和C++的区别：
(1)源文件后缀名
C语言的源文件的后缀名是.c
C++的源文件的后缀名是.cpp

(2)引用的头文件
C语言引用的头文件一般是<stdio.h>
C++引用的头文件一般是<iostream.h>
当然C++也是可以引用<stdio.h>头文件的，因为C++是全面兼容C语言的。

(3)输出
int a=1;
C语言中输出 printf("%d\n",a); \n表示换行
C++中输出  count<<a<<endl; endl表示换行

(4)C语言必须要在执行任意语句之前先定义变量，而C++可以在用的时候定义。

(5)C语言中不允许函数的重载，C++允许函数的重载


(6)C++有命名空间的概念

C++中一般引用的头文件
#include<iostream>
using namesapce std;  (count等都是std命名空间中的)
而不用
#include<iostream.h>
因为<iostream.h>是比较老的头文件，不带.h的<iostream>头文件是比较新的头文件。
但是用不带.h的头文件<iostream> 需要使用命名空间 using namesapce std;

(7)自定义数据类型
 C语言中用struct结构体定义自定义数据类型。
 C++中除了struct外，还引入了类(class)的概念。

(8)C语言是面向过程的，C++是面向对象的。


 这里再强调一下：C++是全面支持C语言的。

2.类与对象

  C++的四大对特征:抽象，封装，继承，多态
 
  C++是支持多继承的(Java是单继承的)；

  类的定义:
  class 类名{
      
  };

  
  访问权限修饰符: public,protected,private

  默认的访问权限修饰符是private

  只有公有成员(成员变量，成员方法),才能够通过 对象名.成员 来访问。


  ::(作用域解析符)
  当需要在类外实现类的成员函数，需要使用作用域解析符来指明实现的是哪个类中的方法

  void Student::setId(int id){
   this->id=id;
  }


  对象的实例化:
   (1)直接定义类的实例
    Student student;
    创建了Student类的一个对象，同时为它分配了存储空间
   (2)动态创建类的对象的方法（使用new关健字创建）   

3.this指针
  this指针 代表的是当前对象的地址

4.const(常量)

int * p
const int * p;
int const * p;

int * const p;
const int * const p;

const如果在 * 的左边 则表示 *P是常量 不能够通过指针p修改p指向的内容。
const如果在 * 的右边 则表示 p(指针)是常量,指针不能改变指向 
如果*的左边右边都有，则 *p,p都是常量,即指针p,以及指针p指向的内容都是常量，都不可变。


F

5.构造函数，析构函数，拷贝函数，赋值语句(C++四少)
  
-构造函数
  构造函数:函数名与类名一样，没有返回值类型
  一个类中可以有多个构造函数。
   
  public:
      Student(){

      }  

      Student(int id){
      this->id=id;
      }

      Student(string name){
      this->name=name;
      }

      Student(int id,string name){
      this->id=id;
      this->name=name;
      }
   

   //使用不同构造函数实例化对象

     Student student;     //调用的是无参构造函数实例化
     Student student(1);  
     Student student("张三");
     Student student(1,"张三");
   
   上面几个构造函数函数名一致，参数不同(参数个数，参数类型)，说明构造函数可以重载。

   与Java中一样，如果没有给出构造函数，那么C++中的类会有一个默认的无参构造函数。
   如果你在类中写了构造函数，那么系统就不会提供这个默认的构造函数。

      

   类的默认构造函数只能有一个，
   构造函数没有参数，
    public:
          Student(){

         } 
   构造函数有参数，但是所有的参数都有默认值
     public:
        Student(int id=0){

        }

    这样的构造函数都是系统认为的默认的构造函数 ，类中只能存在一个;



    还有我们在实例化的时候一定要注意：
    
    Student student; //这是调用无参的构造函数实例化对象。

    但是一定不要这样写: Student student();
    这样写编译不会报错，运行也不会报错，但是这不是实例化对象，而是声明一个函数，
    所以不要认为student()是实例化对象。


    构造函数的三个作用:
    (1) 实例化对象
        
         Student student;
         上面就是由无参的构造方法实例化一个Student的对象

    (2) 成员变量的初始化
      public :
       Student(int id){
       this->id=id;
       }
       这也比较好理解，我们一般在构造方法里对成员变量进行初始化

    (3) 类型的转换
       public :
       Student(){

       }
       Student(int id){
       this->id=id;
       }
      
       Student student;
       int t=10;
       student=t;  //这是可以赋值的，这是因为Student有一个Student(iny id)构造方法，这里会调用这个构造方法创建一个临时的Student对象，然后把这个临时对象赋值给student。
       如果Student类中没有这个具有一个整型的参数的构造方法，那么就不能这样赋值了(student=t)
       cout<<student.getId()<<endl; //打印出是10

       这是构造方法一个比较特殊的作用。


-析构函数
   析构函数：是用来释放对象占用的内存空间的。
   当一个对象的生命周期结束时，C++会自动调用一个函数注销该对象，释放相应的内存空间。

   析构函数的名字: ~类名,没有返回值类型,析构函数不能有任何参数。
   一个类析只能有一个析构函数。
   如果类中没有给出析构函数，系统会提供一个默认的析构函数。

-拷贝构造函数
   
  学习拷贝函数之前，先来学习一下引用的概念：
  引用:

  我们先来看两个函数
  void swap1(int x,int y){
   int temp=x;
   x=y;
   y=temp;
  }

   int a=1;
   int b=2;
   swap1(a,b);

   cout<<a<<","<<b<,endl;  //打印结果:1,2 ; a,b并没有交换。
   
  void swap2(int *x,int *y){
  int temp=*x;
  int *x=*y;
  int *y=temp;
  }
    int a=1;
    int b=2;
    swap2(&a,&b);
  cout<<a<<","<<b<<endl; //打印结果: 2,1 ;  a,b 发生交换了。

  
  引用符号:& (引用就是别名)

  void swap3(int &x,int &y){
  int temp=x;
  int x=y;
  int y=temp;
  }
    int a=1;
    int b=2;
    swap3(a,b);
  cout<<a<<","<<b<<endl; //打印结果: 2,1 ;  a,b 发生交换了。
  
  引用：
  (1)引用不是一个新的变量，是另外一个变量的别名
   int a=1;
   int &b=a;
  (2)引用不能是空引用，必须是已有变量的一个引用，引用必须要初始化。
   int &b; //这样定义是不允许的

   拷贝构造函数:
   在创建一个类的对象时可以用这个类的另外一个对象来初始化,这时候调用的是拷贝构造函数。
   
   Student stu1;
   Student stu2(stu1); //这里调用的就是拷贝构造函数
   
   拷贝构造函数的名字与类名相同，且参数是该类对象的引用
   Student(Student &stu){
    this->id=stu.id;
   }

  常引用：使用const关键字修饰的引用称之为常引用,常引用只能与某个变量进行关联，不能与其他变量进行光亮
   int a=1;
   const int &b=a;(这个时候引用b只能与变量a进行关联，不能再与其他变量进行关联)。


   

   如果类中没有提供拷贝构造函数，系统会提供一个默认的拷贝构造函数。
   
   拷贝构造函数会在三种情况下会被调用:
   
   (1)在创建一个类的对象时可以用这个类的另外一个对象来初始化,这时候调用的是拷贝构
    Student stu1;
    Student stu2(stu1);
    或
    Student stu1;
    Student stu2=stu1;
    这都属于对象的初始化。
   
   (2)如果函数的参数是类的对象时，则调用这个函数时，会调用拷贝构造函数
      void fun(Student student){
       
      }
     
     调用函数时，进行实参与形参的传递时，这是要在内存中新建一个局部对象，然后把实参拷贝到新的对象中。

     
   (3) 当函数的返回值是类的对象时 ，调用该函数时，会调用拷贝构造函数
       因为局部对象在离开建立它的函数时就消亡了，不可能在返回调用函数后继续生存，所以编译器
       系统会在调用函数的表达式中创建一个无名临时对象，该临时对象的生存周期只在函数调用处的表达式
       中，所谓return对象，实际上是调用拷贝构造函数把函数中对象的值拷贝给临时对象。
    
       后面两种情况本质上也是第一种情况，即用对象初始化对象。
    
-赋值函数
 
 赋值函数的名字就是 operator=(实际上这里就是运算符"="的重载)

 返回类型 operator = (参数类型 参数){
          


  }

 上面是赋值函数的基本形式,
 一般写成这种:

 Student& operator =(const Student &stu){
    
    if(this！=&t){
      this->id=stu.id;
      return *this;
    } 
 
 }



 Student stu1;
 Student stu2;
 stu2=stu1;  //这就是赋值(赋值的时候，会调用赋值函数)
 
 这里实际上就是 stu2.operator=(t1);(stu2调用operator=方法)；
  

 注意:下面这个不是赋值，而是对象的初始化(调用的是拷贝构造函数)
  Student stu1;
  Student stu2=stu1;

-小结一下
 一般情况下， 对于一个类，即时我们没有提供任何的方法，系统也会为这个类
 提供四个默认的方法: 
 即默认的构造函数，默认的拷贝构造函数，默认的析构函数，默认的赋值函数。
 但是实际上不只是上面这四个默认的函数，而是六个默认的方法，其余的两个分别是
 对普通对象取地址，对常对象取地址函数

 对普通对象取地址函数：
  Student stu1;
  Student *p=&stu1;  //这里对stu1对象取地址，实际上会调用一个系统提供的默认的取普通对象地址的函数

  Student* operator &(){
    return this;
  }

  对常对象取地址函数：
  const Student stu1;
  const Student *p=&stu1;//这里是对一个常对象stu1取地址，也会调用一个默认的取常对象地址的函数

  const Student * operator&() const{
     
  }

6.浅拷贝，深拷贝
public :
Student{
  char *name;


};

当一个类中有指针型成员变量的时候，当我们用一个用象初始化另一个对象的时候，
会调用系统提供的默认拷贝构造函数。
默认的拷贝构造函数只是让name指针指向了同一块内存地址，这就是浅拷贝
public:
  Student(const Student &stu) {
   this->name=stu.name;
  }
Student stu1;
Student stu2(stu1);  //这样调用的是系统默认的拷贝构造函数,stu2的name和stu1的name指向的是同一块内存空间。

深拷贝：
深拷贝是如果类中有指针型成员变量的时候，我们需要自己写拷贝构造函数，拷贝构造函数不能是指针型成员的简单赋值，
而是先为拷贝对象的指针型成员开辟一个内存空间，然后再把参数对象的指针成员指向的内容赋值给拷贝对象的内容。

  public :
  Student(const Student &stu){
   name=(char *)malloc(sizeof(char)*(strlen(stu.name)+1));
   strcpy(name,stu.name);
  }

 这就是深拷贝

7.运算符重载
  
 返回类型 operator 运算符(参数){

 }
 
 C++中基本上所有的运算符都可以重载，只有极少数运算符不能重载

 以下五种运算符是不能重载的
  (1) ?:    (三目条件运算符)
  (2) . 和.* (成员操作符)
  (4) ::  (作用域操作符)
  (5)sizeof (字符长度操作符)

  运算符重载有以下几种限制:
  (1)不可臆造新的运算符
  (2)不能改变运算符原有的优先级
  (3)不能改变运算符原有的操作数的个数
  (4)重载运算符含义必须清楚，不能有二义性

 8.友元

 友元函数：
 现在我们可以通过将一个函数声明为一个类的友元函数，来在这个函数中
 访问类的私有成员。 
  
 class Student; //声明类
 void show(Student &stu);//声明方法    
 //这里要注意的，如果引用的是<iostream>头文件，则需要声明类和函数，如果引用的是<iostream.h>,则不需要声明类和函数。
 
 class Student{

  friend void show(Student &stu);//声明show()方法为Stduent的友元函数
 
 public:
 Student(int id){
 this->id=id;
 }

  private:
  int id;
 };

 void show(Student &stu){
         
   cout<<stu.id<<endl; //因为show()是Student的友元函数，所以在show()方法中可以直接访问Student的私有成员。
 }
  
int main(){
  Student stu(1);
  show(stu);  //直接调用友元函数
}

 友元函数要用 friend 关键字在类中声明，可以在类里面实现，也可以在类外实现(一般在类外实现，避免认为是成员函数)，
 在类外实现的时候可以不用加friend关键字, 并且注意友元函数不是类的成员函数，所以不需要用对象来调用，直接调用接口。
  

 友元类：
 一个类可以是另外一个类的友元类，友元类的每个成员函数都是另外一个类的友元函数，都可以访问另外一个类中成员。
 
 class A{
  
 };

class B{
  friend class A; //A被声明为B的友元类
 };

A被声明为B的友元类，A中的所有方法都是B的友元函数，
那么A中的所有成员函数都可以访问B中的私有成员。

9.输入,输出运算符的重载
  
  class Complex{
  
  private:
  int real;
  int imag;

  public:
  Complex(int real,int image){
    this->real=real;
    this->image=image;
  }  
}; 
Complex complxe(1,2);
对于上面这个复数对象,如果我们直接输出这个对象cout<<complex;是不可以的，
因为系统无法识别这个自定义类的输出，但是我们可以重载输出运算符(<<)函数，
并且把重载的运算符函数声明为Complex的友元函数来实现cout<<complex;

#include<iostream>//引用头文件
using namespace std;//使用标准命名空间
class Complex; //声明Complex类
ostream& operator<<(ostream& out,Complex complex);//声明输出运算符重载函数
class Complex{
friend ostream& operator<<(ostream& out,Complex complex);//声明类的友元函数
private:
  int real;
  int image;
public:
  Complex(int real,int image){
  this->real=real;
  this->image=image;
}
};
//实现运算符重载函数
ostream& operator<<(ostream& out,Complex complex){
   out<<complex.real<<","<<complex.image;
}
int main(){
Complex complex(1,2);
cout<<complex<<endl;
return 0;
}

输出运算符的重载是类似的。

10.static和const
  
  -static:

  使用关键字static修饰的成员称之为静态成员，静态成员是类级别的成员，
  是类的所有对象所共有的。
  我们可以通过 类名::静态成员名 来直接访问静态成员,当然通过对象来访问也是可以的。
  当然要保证是公有的静态成员变量，或者是在成员函数内部或者是友元函数中。
  
  静态成员的初始化要在类外
  静态成员函数中只能访问静态成员，不能访问非静态成员,原因就是静态成员函数中是类级别的函数
  ，不存在this指针(this是当前对象的地址，这是类级别函数没有当前对象的概念，所以也就没有this指针)。


class Student;
void printCount();
class Student{
friend void printCount();
private :
int id;
static int count;
};
int Student::count=1; //初始化

void printCount(){
cout<<Student::count<<endl;
}

int main(){
printCount();
}

-const:
class Student{
 public:
 void fun()const{

 }
 }
使用const修饰的方法是常方法，常方法中不能修改数据成员变量。
原因：我们知道每一个类的成员函数都有一个隐含的参数 Student * const this
上面的 void fun()const方法实际上是：
 void fun(Student * const this)const{

 }

 而常方法的const实际上就是修饰这个this参数的，
 即本质上是
 void fun(const Student * const this){
  
 } 

 const在*的左边表明不能通过指针来改变指向的内容，所以在常成员方法中是不能修改
 成员变量的。

普通方法可以调用常方法，常方法不可以调用普通方法。

总结：如果我们不希望成员方法改变成员变量，就可以把这方法定义为常方法(在参数列表后加上const)。
     
11.模板
C++中的模板与Java中的类型参数化是相类似的

 int Max(int a,int b){  
  return a>b?a:b;
 }

 float Max(float a,float b){
  return a>b?a:b;
 }

 double Max(double a,double b){
  return a>b?a:b;
 }

上面的代码就显得非常冗余，所以C++中引入了模板的概念，数据类型参数化

(1)函数模板：

下面就是一个函数模板：
template <typename Type>
Type Max(Type a,Type b){
  return a>b?a:b;
}
在比较老的语法里也会这样写：
template <class Type> //这里用class,注意这里的class就是typename,就表示是类型名关键字(而不是类的概念，不要混淆)
Type Max(Type a,Type b){
  return a>b?a:b;
}
一般都是用typename关键字，而不再用class关键字了。

template <typename Type> 
Type Max(Type a,Type b){
  return a>b?a:b;
}
 
 Max(1,1);
 Max(1, (int)1.1);
 Max((double)1, 1.1);
 Max<int>(1,1.1);
 Max<double>(1,1);

template<typename Type1,typename Type2>
Type2 Max(Type1 a,Type2 b){
  return a>b?a:b;
}

(2)类模板
 模板类中的所有函数(构造函数，成员函数)都是模板函数，所在如果是在类外
 实现类的成员函数，要注意函数必须声明为模板函数，要加上 template <typename type>

 template <typename type>
 class Student{
  public:
  Student(type id);
   private:
   int id;
 };

template <typename type>
 Student<type>::Student(type id){
       this->id=id;
 }

 模板类的声明： (也要加上模板声明)
 template <typename type>
 class Student;


 C++中不支持模板的分离编译，即在一个文件中声明实现模板函数和模板类
 在另外一个文件中使用该模板函数和模板类

 12.动态内存分配

  静态内存分配，动态内存分配。
  
  int a=1; 
  Student stu;
  int a[10];
  上面都是由系统分配内存空间，属于静态内存分配，都是栈内存的分配,静态分配的内存空间
  由系统自动释放回收。

  而动态内存的分配是使用malloc和new关健字来动态分配内存空间，是堆内存空间的分配,需要手动释放回收。 
 
  C语言中动态开辟和释放内存空间
  
  int *p=(int *)malloc(sizeof(int));//开辟一个整型空间
  free(p);  //释放内存空间

  int *arr=(int *)malloc(sizeof(int)*n);//为数组开辟内存空间
  free(arr); //释放内存空间


  C++中可以使用new和delete来开辟和释放内存空间
  (当然C++中也可以使用malloc和free来申请和释放内存空间,因为C++是完全兼容C语言的)

  int *p=new int(0);//使用new开辟了一个整型空间，并且初始化内容为0
  delete p;//释放内存空间

  int *arr=new int[10];//这是为数组开辟了10个整型空间
  delete []arr;  //释放数组的内存空间 前面要加上 []

  
  
  为自定义类类型的对象分配内存空间

  class Student{
     public :
      Student(int id){
         this->id=id;
      }
       int getId(){
        return id;
       }
     private :
     int id;
     };
  
  void use_malloc_free(){
   Student *stu=(Student *)malloc(sizeof(Student));
    cout<<stu->getId()<<endl;
    free(stu);
  }

  void use_new_delete(){
    Student *stu=new Student(10);//  这要保证Student有一个Student(int)的构造函数
    cout<<stu->getId()<<endl;
    delete stu;
  }
 
  对于简单的数据类型的空间的分配，malloc和new没有什么区别，
  而对于类类型的对象的空间的分配 ，malloc和new就有区别了。 
  
  使用new分配一个Student内存空间，会调用Student的构造方法，delete的时候会调用Student的析构函数
  而使用malloc分配一个Student内存空间，就不会调用Student的构造方法,free的时候也不会调用Student的析构函数

  
  使用new为自定义类类型的对象数组分配内存空间。
  Student *stuArray=new Student[10]; //这里要保证数组有无参构造函数，或者是构造函数有参数，但是所有的参数都有默认值,否则无法分配内存空间。
  //分配了几个对象内存空间，会调用几次构造函数。
  delete []stuAtrray;//如果开辟的是数组空间，释放的时候要加上 [],释放了几个对象内存空间，就会调用几次析构函数。


  Java有垃圾回收器，会自动回收垃圾内存空间，我们只管分配开辟内存空间即可。
  而C/C++中必须手动释放动态分配的内存空间。

  但是各有利弊: Java有垃圾回收器，会自动回收垃圾内存，C/C++必须手动释放不用的动态分配的内存空间。
                但是Java中垃圾回收必须满足一定要求后才会回收垃圾内存，而C/C++中只要在不用的时候，
                我们就可以手动释放内存空间，所以C/C++中效率要高一点。

 13. 继承与多态
  判断一门语言是否是面向对象的，就是看其是够具有是否具有继承与多态的特点。
  (1)继承
   被继承的类被称之为基类(父类)， 新派生出来的类称之为派生类(子类)
  
  class  子类名: 访问限定符 继承父类名{  //这里的访问限定符可以不写，默认的是private即私有继承


  };
  
 无论子类是公有继承自父类，私有还是保护继承自父类，都能继承父类除了构造函数和析构函数之外的所有成员(
 不论是私有成员还是公有成员)
 
 -公有继承
 class Parent{

 };
 
 class Child:public Parent{

 }; 

 如果子类是公有继承自父类，那么从父类继承的成员访问权限都是不会改变的,但是在子类中不能直接访问
 从父类继承过来的私有成员,但是可以在子类中直接访问从父类继承过来的 公有的 和 受保护 的成员。
 。
 这是在子类中，而子类对象还是只能直接访问公有成员。



-保护继承
  class Parent{

  };
  class Child:protected Parent{

  };

 子类保护继承自父类 ，那么同样子类继承父类的除了构造函数和析构函数外的所有成员，但是这里要注意的是
 从父类继承过来的公有成员变成了受保护的成员，从父类继承过来的受保护的和私有成员访问权限不变。
 
-私有继承
 class Parent{

 };
 class Child:private Parent{

 }

 子类私有继承自父类，同样子类继承父类除了构造函数和析构函数之外的所有成员，从父类继承过来的成员
 都变成了私有成员。对于成员变量来说，不论是在父类中是私有的，还是继承后变成私有的，在子类中均不能
 直接访问。

 但是对于继承的父类成员方法，只要在父类中原有的访问权限不是私有的，那么不论继承后方法的
 访问权限是什么，在子类中均能访问该方法。如下所示：

  class Parent{
  private :
     int x;
  public :
     int getX(){
      return x;
     }
  };
  class Child :private Parent{
   public:
    void showX1(){
      cout<<getX()<<endl;
    }
  }


总结：

  子类继承父类的除 构造函数 和 析构函数 外的所有成员

  继承中访问权限情况分为两种，在 子类中访问 和 通过对象访问

  通过对象访问:只要不是公有的成员，均不能通过对象直接访问(私有，受保护的)。

  在子类中：从父类中继承过来的成员变量，如果集继承后访问权限最终是公有的和受保护的,则在子类中可以直接访问，
            访问权限是私有的，则在子类中不能直接访问。
            从父类继承过来的成员方法，只要在父类中原有访问权限不是私有的，那么子类继承后，不论方法的最终访问权限是什么，
            在子类中都能直接访问。

 C++支持多继承，这与Java不同，Java中只能单继承。

  class Child :public Parent1,public Parent2,private Parent3{


  };
  
  上面就是一个多继承实例，子类Child公有继承Parent1，公有继承Parent2,私有继承Parent3。

  访问去权限一般不要省略，省略后意义就不一样了，如下所示：
  class Child : public Parent1,Parent2,Parent3{

  }
  这时候Child是公有继承Parent1,而Parent2,Parent3就是默认的私有继承。(注意：这里不要认为都是公有继承)


 (2)子类的构造函数和析构函数的调用顺序
    
    实例化一个子类对象时，按照子类继承父类的顺序，先依次调用父类的构造函数，再查看是否有对象数据成员，如果有依次
    调对象数据成员所属类的构造函数，然后再调用子类的构造函数。
    
    析构函数的调用顺序就是与严格与构造函数调用顺序相反。
     
    注意：
    因为实例化子类对象时，必须要先实例化父类对象，如果父类没有无参构造函数，或者是不存在某个构造函数的所有参数都有默认值，那么就必须在子类的构造函数中，用参数列表的形式显示的声明父类是调用哪个构造函数实例化的。

    同样如果某个类中有对象数据成员，并且对象数据成员所属的类没有无参的构造函数，或者是不存在某个构造函数所有参数都有默认值，那么必须在该类的构造函数中，用参数列表的形式显示的初始化对象数据成员
   
    如下所示：
    
    class Parent1{
    private:
        int x;
    public:
      Parent1(int x){
       this->x=x;    
      } 
    };
    class Parent2{
    private:
        int x;
    public:
      Parent2(int x){
       this->x=x;    
      } 
    };
    
    class Parent3{
    private:
        int x;
    public:
      Parent3(int x){
       this->x=x;    
      } 
    };
      
   class Child :public Parent1,public Parent2,public Parent3{
        
      public:
       
      Child(int x):Parent1(x),Parent2(x),Parent3(x)，p1(x),p2(x),p3(x){ //三个父类都没有默认的构造函数，所以必须用参数列表的形式来声明父类调用的构造函数。  

      }

     private:  //子类中有对象数据成员
       Parent1 p1;
       Parent2 p2;
       Parent3 p3;
   }; 

14.钻石继承和虚基类

(1)钻石基类

如果子类继承了多个父类，当多个父类中有名字相同的成员时，在子类中可以通过
类名::作用域限定度来指明调用的是哪个父类中的成员
如下所示:
 class Parent1{
   public :
    int  x;
  public: 
     Parent1():x(0){
     this->x=x;
     }
 };

 class Parent2{
   public :
      int x;
        Parent2():x(0){
         this->x=x;
        }
  };
 
  class Child :public Parent1,public Parent2{
 
  };

  int main(){
   Child c;
    c.Parent1::x=2;   //使用作用于限定符来区分使用的是哪个父类中的成员变量，避免二义性。
    c.Parent2::x=3;
    return 0;
  }


  下面来看一下什么是钻石继承：

  class A{
      public :
        int x;
  };
  class B :public A{


  };

  class C:public A{

  };

  class D:public B,public C{
  
  };

分析一下上面的这个关系：有一个 类A, 类B和类C 都继承自 类A，而 类D 继承类B和类C
        A
 
    B       C

        D
继承关系就可以画出形如上面的这样一个菱形，类似于钻石，我们称之为 钻石继承。

钻石继承就可能出现上面我们所说的二义性问题，因为 B,C都继承自A，所以都继承了A的 x，
而D又继承B和C，所以从D从B继承了一个x,从C又继承了一个x。

这时候 D d;   d.x就会出现二义性，所以我们也要用作用域限定符来指明访问的是从哪个类中继承的x :
D d;
d.B::x=2;
d.C::x =3; 

(2)虚基类
 上面我们已经知道了什么是钻石继承，但是我们发现，B,C都继承自A，而D继承自B,C,所以
 D分别从B,C继承了一份x,所以一共就继承了两份x。

 但是有的时候，我们并不希望继承两份x，而是只希望继承一份x,这时候就可以用到虚基类的概念。

   

 class A{
      public :
        int x;
  };
  
  class B : virtual public A{   //virtual在public前和public后都是一样的


  };

  class C :  virtual public A{

  };

  class D:public B,public C{
  
  };

  这时候再分析一下：
  B,C继承A的时候都加了一个virtual关键字，这就是虚拟继承,这个时候 
  B,C中都继承了x,但是不是B,C中各有一份x,而是B,C中继承的都是同一份x,

  这个时候D继承自B,C，因为B,C中是同一份x,自然D继承到的也就是一份x。
  所以这个时候 :
  D d; d.x就不会有二义性了。

   
  但是涉及到虚基类，也即虚拟继承的情况下，实例化子类对象时，构造函数的调用情况就有所不同了：

  前面我们说过：实例化子类对象时，首先按照继承父类的顺序，依次调用父类的构造函数实例化父类，
  然后再看是否有对象数据成员函数，按照顺序依次调用对象数据成员的构造函数，最后调用该子类的
  构造函数。

  
  -涉及虚拟继承时，实例化子类对象时，构造函数的调用情况：

  但是如果子类虚拟继承了某个类，那么一定是先调用这个虚拟继承父类的构造函数，然后其他父类按继承顺序调用构造函数
  实例化，再是对象数据成员调用构造函数实例化，最终是该子类构造函数被调用。

  析构函数还是与构造函数的调用顺序相反。

  如下所示:

  
 class A{
      public :
        int x;
  };
  
  class B : virtual public A{   //virtual在public前和public后都是一样的


  };

  class C :  virtual public A{

  };

  class D : public B, virtual public A , public C{
  
  };

  这个时候实例化D对象时构造函数的调用顺序应该是 : A ,B,C 最后是子类D (父类构造函数调用顺序不再是继承的顺序，B,A,C);


15.同名隐藏与赋值兼容原则

 (1)同名隐藏
   class A{
     public :
       void show(){
         cout<<"A"<<endl;
       }
   };

   class B:public A{
    public :
      void show(){
        cout<<"B"<<endl;
      }
   };

 子类中定义了一个与父类中名字一样的方法,这就是同名隐藏，
  B b;
  b.show();调用的是B中的show()方法
 
 但是这里要特别注意一点： 这里的隐藏没有参数的影响，也即只要子类中定义了一个
 与父类中名字一样的方法，父类中的同名方法就会被隐藏，即使参数不同，也会被隐藏。
  
如下所示:
   class A{
     public :
       void show(){
         cout<<"A"<<endl;
       }
       void show(int i){
        cout<<i<<endl;
      }
   };

   class B:public A{
    public :
      void show(){
        cout<<"B"<<endl;
      }
   };

   int main(){
   D d;
    d.show() //没有问题，调用的是子类中的方法。

   // d.show(1);
   //这个时候d.show(1)是无法调用的，因为B中定义了与父类中同名方法，父类中所有名字为show的方法都会被隐藏，不论是否有参数。
  }

 (2)赋值兼容规则：
   
   子类对象可以给父类对象赋值(对象的向上转换),但是父类对象不能给子类赋值

   子类的地址可以赋值给父类的指针变量，但是这个父类指针变量只能访问父类的成员，
   不能访问子类的成员。

   子类的对象可以赋值给父类的引用(但是这个父类引用只能只能访问父类的成员)

   
16.多态
  前面说过，继承和多态是用于判断一门语言是否是面向对象的。
  
  前面已经介绍过赋值兼容规则，但是我们知道子类对象赋值给父类对象，子类地址赋值给父类指针，
  子类对象赋值给父类引用，赋值后，父类对象，父类指针，父类引用都只能调用父类的中的方法，
  即时子类中定义了同名的方法，访问的仍然是父类中的方法。

  但是如果在子类中定义了一个与父类同名的方法，子类地址赋值给父类指针，
  子类对象赋值给父类引用，父类指针，父类引用调用该方法时，调用的能够是子类中的该同名方法。

  我们只需要在父类中的该同名方法前加上一个virtual关键字，即在父类中吧这个与子类中同名的方法声明成虚方法，
  这样当子类中有一个与父类中同名的方法时，通过父类指针，父类引用调用的就是子类中的该同名方法。
  但是注意：是通过父类指针，父类引用调用同名方法，调用的是子类中的方法，
  如果是把子类对象赋值给父类对象，通过父类对象调用的还是父类中的该同名方法。
 

  class A{
   public ；
    virtual void  show(){//声明为虚函数
     cout<<"A"<<endl;
     }
  };

  class B:public A{
         public :
           show(){
           cout<<"B"<<endl;
           }
  };

int main(){
   
   B b;
   A a=b;
   a.show();//调用的还是父类中的方法

   A *p=&b;
     p->show();//调用就是子类中的方法

   A &x=b;
     x.show(); //调用的就是子类中的方法

   return 0;
}

这就是C++中的重要的多态概念，除了这种通过重写父类的虚方法实现多态之外，C++中的函数的重载,操作符的重载也是多态的一种。
C++中的多态:
(1)重写父类的虚方法
(2)函数重载
(3)操作符重载

当一个类中有虚函数时，系统就会为之分配一个虚表，虚表中存放的是这些虚函数的地址,
在实例化子类的时候，我们知道会先实例化父类，父类中会有一个虚表，虚表中存放的都是
父类中虚函数的地址，然后再实例化子类，一旦子类中定义了与父类中虚函数同名(只要名字一样即可,不管参数，返回值)
的方法,那么父类对象中的虚表的该同名虚函数的地址就会被改成子类中该函数的地址，
所以父类指针，或者是父类引用调用该虚函数时，调用就是子类中该函数。

这就是子类重写父类虚函数实现多态的原理。


然后我们再来分析一下 重载，隐藏，覆盖

-重载：是在在同一个类中，方法的名字相同，方法的参数(参数的个数和参数数据类型)不同，这就是重载。

   class A{
    
     public : 
       
       void show(){
        cout<<"A"<<endl;
        }
       
        void show(int i){
          cout<<i<<end;
          }
    }

 类A中 show()和show(int i)就是重载的关系


-隐藏：在子类中定义了与父类中同名的(只要名字相同即可)方法， 这个时候通过子类对象调用就是
      子类中的方法，父类中所有同名的方法都别隐藏了。

   
class A{
    
     public : 
       
       void show(){
        cout<<"A"<<endl;
        }
       
        void show(int i){
          cout<<i<<end;
          }
    };

class B :public A{
    public:
          void show(){
          
            cout<<"B"<<endl;
          }

};


 这个时候子类中的show()方法会隐藏类A中的所有的同名方法 show()和show(int i),都会被隐藏。
 B  b:
 b.show()可以调用，但是调用的是子类中的方法。
 b.show(1)不可以调用，虽然子类从父类中继承了这个带参的show(int i)方法，但是由于子类中定义
 了一个同名的show()方法，所以继承的父类中的带参数的show(int i)方法也会被隐藏，所以
 子类对象无法调用带参数的show(int i)方法。


-覆盖：覆盖就是C++中的多态的概念，即子类中定义了与父类中某个虚函数同名(只要求同名，不管参数，返回值)的方法
，这个时候将子类地址赋值给父类指针，将子类对象赋值给父类引用后，
父类指针，父类引用调用该方法时，调用的都是子类中的方法。 
如果父类中不是虚函数，那么父类指针，父类引用调用的只能是父类中的成员。


class A{
    
     public : 
       
       virtual void show(int i){
        cout<<"A"<<endl;
        }
      
    };

class B :public A{
    public:
          void show(){
            cout<<"B"<<endl;
          }

};

B b;
A *p=&b;
p->show(1);调用的是子类中的方法show()方法

A &a=b;
b.show(1);//调用是子类中的方法show()方法

17.纯虚函数

纯虚函数：
就是不被具体实现的虚拟成员函数(实际上纯虚函数就类似于Java中的成抽象函数)

定要形式如下：
virtual 返回类型 函数名(参数) = 0 ；

含有纯虚函数的类是抽象类,抽象类是不能被实例化的。 

class Animal{
  public:

   virtual void eat()=0;
   virtual void sleep()=0;
};

class Dog :public Animal{
  public :

   virtual void eat(){
   cout<<"Dog eat"<<endl;
   }
   virtual void sleep(){
   cout<<"Dog sleep"<<endl;
   }
};

一个类继承自抽象类，如果没有实现抽象父类中的所有纯虚函数，那么这个类仍然是抽象类，不能实例化。
只有实现了抽象父类中的所有纯虚函数，这个类才不是抽象类，才能够实例化。


17.流类库和输入输出

  cout是ostream类型的对象 

  cin是istream类型的对象  

  ostream和istream都是继承自iostream的。

  在流类库中,最重要的两部分功能:标准输入输出(cin,cout),文件的处理。

  -文件的输入输出
   文本文件的读写
   二进制文件的读写
   文件的随机访问

  文件的读写步骤：
  (1)创建文件流对象 (需要引入<fstream>头文件)
   
  (2)打开文件
     
  (3)读写文件
     
  (4)关闭文件流对象


  文件的随机访问：

  
18.C++中的异常处理机制
  异常:程序在运行过程中出现的未知错误(运行时错误)

  try (将有可能发生异常的代码放在try中)

  catch (捕获异常)

  throw (抛出异常)

   
   int  fun(int a,int b){
   
     if(b==0){
     
       throw b;  //抛出b,一旦抛出异常，程序就从这里直接到catch中,后面的语句就不会执行了。

     }

      return a/b;

   }

    try{
        
      fun(1,0);
   
     }catch(int){    //捕获整型异常
      
      cout<<"除数为0"<<endl;
    
      }catch(...){   //捕获一切异常

         cout<<"出现异常"<<endl;
    }

  
  函数也可以抛出异常

  int fun(int a,int b)throw(){
    return a/b;
  }

  如果我们不自己捕获异常，那么出现异常时，异常会直接交给系统处理，
  系统会直接终止程序。
  
  我们可以自己定义异常类，然后在程序中抛出，捕获自定义异常类。

19.STL(Standard Template Library)标准模板库
    
  

    
   


 






 
  

 

 
   















  

  



   


     